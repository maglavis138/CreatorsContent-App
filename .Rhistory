hc_add_series(data = ds_lc_reposts, name = "Var. Reposts", type = "line", yAxis = 1) %>%
hc_plotOptions(line = list(stacking = "normal", marker = list(enabled = FALSE)), column = list(stacking = "normal", grouping = TRUE, shadow = FALSE, borderColor = "black")) %>%
hc_tooltip(shared = TRUE, pointFormat = '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%
# hc_tooltip(shared = TRUE)%>%
hc_add_theme(hc_theme_smpl())
hc
})
})
# -----------------------------------------------------------------------------------------------------------------------
}
# SHINY APP =========================================================================================================================
shinyApp(ui = ui, server = server)
colors <- brewer.pal(4, "Set3")
runApp()
runApp()
colors <- brewer.pal(4:9, "YlGn")
colors <- brewer.pal(-9, "YlGn")
colors <- brewer.pal(9, "YlGn")
colors <- brewer.pal(6, "Greens")
colors <-
colores<- c('#D55200', '#2580B9',  brewer.pal(6, "Greens"))
colors <-c('#D55200', '#2580B9',  brewer.pal(6, "Greens"))
runApp()
colors <-c('#D55200', '#2580B9',  brewer.pal(2:7, "Greens"))
colors <-c('#D55200', '#2580B9',  brewer.pal(12, "Greens"))
colors <-c('#D55200', '#2580B9',  brewer.pal(9, "Greens"))
colors <-c('#D55200', '#2580B9',  brewer.pal(1:9, "Greens"))
runApp()
runApp()
runApp()
colores
runApp()
colors <- c(brewer.pal(8, "Paired"))
colors
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
varez", "Wendy Barba"), "Old Staff", DataArticles$author_status)
load("data/DataArticles.Rda")
load("data/DataArticlesBH.Rda")
load("data/DataArticlesFC.Rda")
DataArticles <- DataArticles[!is.na(DataArticles$author),]
DataArticles$article_click_rank <- ifelse(DataArticles$link_clicks <= 5000, "< 5K", ifelse(DataArticles$link_clicks <= 10000, "5K - 10K", ifelse(DataArticles$link_clicks <= 25000, "10K - 25K", "> 25K")))
runApp()
DataArticles <- DataArticles[which(DataArticles$category == "Beauty & Fashion"),]
input$article_overview_repost_wam <- c("Originals", "Reposts")
runApp()
DataArticles <- DataArticles[which(DataArticles$category == "Beauty & Fashion"),]
jorge_rodriguez <- as.xts(DataArticles[which(DataArticles$author_status == "Jorge Rodriguez-Jimenez"),]$post_reach, order.by = DataArticles[which(DataArticles$author_status == "Jorge Rodriguez-Jimenez"),]$created_time)
View(jorge_rodriguez)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
datatable(cbind(' ' = '&oplus;', leaderboard_posts_table), filter = 'top', escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(visible = FALSE, targets = c(3, 4)), list(orderable = FALSE, className = 'details-control', targets = 0)), dom = "tip"), callback = JS("
table.column(1).nodes().to$().css({cursor: 'pointer'});
var format = function(d) {
return '<div style=\"background-color:#eee; padding: .5em;\"> Date: ' +
d[3] + ', Category: ' + d[4] + '</div>';
};
table.on('click', 'td.details-control', function() {
var td = $(this), row = table.row(td.closest('tr'));
if (row.child.isShown()) {
row.child.hide();
td.html('&oplus;');
} else {
row.child(format(row.data())).show();
td.html('&CircleMinus;');
}
});"
)) %>%
formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
datatable(cbind(' ' = '&oplus;', leaderboard_posts_table), filter = 'top', escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(visible = FALSE, targets = c(3, 4)), list(orderable = FALSE, className = 'details-control', targets = 0)), dom = "tip"), callback = JS("
table.column(1).nodes().to$().css({cursor: 'pointer'});
var format = function(d) {
return '<div style=\"background-color:#eee; padding: .5em;\"> Date: ' +
d[3] + ', Category: ' + d[4] + '</div>';
};
table.on('click', 'td.details-control', function() {
var td = $(this), row = table.row(td.closest('tr'));
if (row.child.isShown()) {
row.child.hide();
td.html('&oplus;');
} else {
row.child(format(row.data())).show();
td.html('&CircleMinus;');
}
});"
)) %>%
formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
datatable(cbind(' ' = '&oplus;', leaderboard_posts_table), filter = 'top', escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(visible = FALSE, targets = c(3, 4)), list(orderable = FALSE, className = 'details-control', targets = 0)), dom = "tip"), callback = JS("
function format (d) {
return '<table cellpadding = '5' cellspacing = '0' style = 'padding-left:50px;'>' +
'<tr>'+
'<td>Date:</td>'+
'<td>' + d[3] + '</td>'+
'</tr>'+
'<tr>'+
'<td>Category:</td>'+
'<td>' + d[4] + '</td>'+
'</tr>'+
'</table>';
};
table.on('click', 'td.details-control', function() {
var tr = $(this).closest('tr');
var row = table.row(tr);
if (row.child.isShown()) {
row.child.hide();
tr.removeClass('shown');
}
else {
row.child(format(row.data())).show();
tr.addClass('shown');
}
});"
)) %>%
formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(dplyr)
shinyServer(function(input, output, session) {
A <- data.frame(Name = c("Airi Satou", "Angelica Ramos","Paul Byrd"),
Position = c("Accountant","Accountant", "CEO"),
Office   = c("Tokyo", "Tokyo", "New York"))
A.detail <- data.frame(Name = c("Airi Satou", "Angelica Ramos"),
Extension = c("5407c", "8422"),
Salary    = c(16000, 20000))
# You don't necessarily need to use left_join. You can simply put every column,
# including the columns you would by default to hide, in a data.frame.
# Then later choose which to hide.
# Here an empty column is appended to the left to mimic the "click to expand"
# function you've seen in the example.
A.joined <- cbind("", left_join(A, A.detail, by="Name"))
columns.to.hide <- c("Extension", "Salary")
# Javascript uses 0-based index
columns.idx.hidden <- which(names(A.joined) %in% columns.to.hide) - 1
# Everytime a table is redrawn (can be triggered by sorting, searching and
# pagination), rebind the click event.
draw.callback <- "
function(settings) {
var api = this.api();
var callback = (function($api) {
return function() {
var tr = $(this).parent();
var row = $api.row(tr);
if (row.child.isShown()) {
row.child.hide();
tr.removeClass('shown');
}
else {
row.child(format(row.data())).show();
tr.addClass('shown');
}
}
})(api);
$(this).on('click', 'td.details-control', callback);
}"
# wrap all options you would like to specify in options=list(),
# which will be converted into corresponding JSON object.
output$dt <- renderDataTable(A.joined,
options=list(
searching=F,
columnDefs=list(
list(targets=0,
title="", class="details-control"),
list(targets=columns.idx.hidden,
visible=F)
),
drawCallback=I(draw.callback)
))
})
A <- data.frame(Name = c("Airi Satou", "Angelica Ramos","Paul Byrd"),
Position = c("Accountant","Accountant", "CEO"),
Office   = c("Tokyo", "Tokyo", "New York"))
A.detail <- data.frame(Name = c("Airi Satou", "Angelica Ramos"),
Extension = c("5407c", "8422"),
Salary    = c(16000, 20000))
A.joined <- cbind("", left_join(A, A.detail, by="Name"))
View(A.joined)
columns.to.hide <- c("Extension", "Salary")
columns.idx.hidden <- which(names(A.joined) %in% columns.to.hide) - 1
draw.callback <- "
function(settings) {
var api = this.api();
var callback = (function($api) {
return function() {
var tr = $(this).parent();
var row = $api.row(tr);
if (row.child.isShown()) {
row.child.hide();
tr.removeClass('shown');
}
else {
row.child(format(row.data())).show();
tr.addClass('shown');
}
}
})(api);
$(this).on('click', 'td.details-control', callback);
}"
datatable(A.joined,
options=list(
searching=F,
columnDefs=list(
list(targets=0,
title="", class="details-control"),
list(targets=columns.idx.hidden,
visible=F)
),
drawCallback=I(draw.callback)
))
library(DT)
datatable(A.joined,
options=list(
searching=F,
columnDefs=list(
list(targets=0,
title="", class="details-control"),
list(targets=columns.idx.hidden,
visible=F)
),
drawCallback=I(draw.callback)
))
format.func <- "
<script type='text/javascript'>
var _ajax_url = null;
function format ( d ) {
// `d` is the original data object for the row
return '<table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" style=\"padding-left:50px;\">'+
'<tr>'+
'<td>Full name:</td>'+
'<td>'+d.Name+'</td>'+
'</tr>'+
'<tr>'+
'<td>Extension number:</td>'+
'<td>'+d.Extension+'</td>'+
'</tr>'+
'</table>';
}
$(document).ready(function() {
$('#ajax_req_url').on('change', function() { _ajax_url = $(this).val()});
})
</script>
"
datatable(A.joined,
options=list(
searching=F,
columnDefs=list(
list(targets=0,
title="", class="details-control"),
list(targets=columns.idx.hidden,
visible=F)
),
drawCallback=I(draw.callback)
))
datatable(leaderboard_posts_table, filter = 'top', container = sketch,  escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(className = 'dt-center', targets = c(1:16))), dom = "tip")) %>%
formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
datatable(leaderboard_posts_table, filter = 'top', container = sketch,  escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(className = 'dt-center', targets = c(1:16))), dom = "tip")) %>%
formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
datatable(leaderboard_posts_table, filter = 'top', container = sketch,  escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(className = 'dt-center', targets = c(1:16))), dom = "tip"))
library(DT)
datatable(leaderboard_posts_table, filter = 'top', escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(className = 'dt-center', targets = c(1:16))), dom = "tip"))
datatable(leaderboard_posts_table, filter = 'top', escape = TRUE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(className = 'dt-center', targets = c(1:16))), dom = "tip"))
datatable(leaderboard_posts_table[1:10,], filter = 'top', escape = TRUE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(className = 'dt-center', targets = c(1:16))), dom = "tip"))
draw.callback <- "
function(settings) {
var api = this.api();
var callback = (function($api) {
return function() {
var tr = $(this).parent();
var row = $api.row(tr);
if (row.child.isShown()) {
row.child.hide();
tr.removeClass('shown');
}
else {
row.child(format(row.data())).show();
tr.addClass('shown');
}
}
})(api);
$(this).on('click', 'td.details-control', callback);
}"
datatable(cbind(' ' = '&oplus;', leaderboard_posts_table), filter = 'top', escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(visible = FALSE, targets = c(3, 4)), list(orderable = FALSE, className = 'details-control', targets = 0)), dom = "tip"), draw.callback = I(draw.callback)) %>%
formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
datatable(cbind(' ' = '&oplus;', leaderboard_posts_table), filter = 'top', escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(visible = FALSE, targets = c(3, 4)), list(orderable = FALSE, className = 'details-control', targets = 0)), dom = "tip"), drawCallback = I(draw.callback)) %>%
formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
datatable(cbind(' ' = '&oplus;', leaderboard_posts_table), filter = 'top', escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(visible = FALSE, targets = c(3, 4)), list(orderable = FALSE, className = 'details-control', targets = 0)), dom = "tip", drawCallback = I(draw.callback))) %>%
formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
datatable(cbind(' ' = '&oplus;', leaderboard_posts_table), filter = 'top', escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(visible = FALSE, targets = c(3, 4)), list(orderable = FALSE, className = 'details-control', targets = 0)), dom = "tip", drawCallback = I(draw.callback))) %>%
# formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
View(leaderboard_posts_table)
DataArticles[which(DataArticles$author_status != "Old Staff" & DataArticles$author_status != "Contributor"),]$author_status <- "Current Staff"
DataArticles$full_picture <- paste("<img src ='", DataArticles$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
DataArticles$headline <- paste0("<br><a href='", DataArticles$permalink,"' target='_blank'>", DataArticles$headline,"</a>")
DataArticles$share_head <- paste(DataArticles$sharetext, DataArticles$headline)
DataArticles$perc_fan <- round(DataArticles$post_reach_fan_unique/(DataArticles$post_reach_fan_unique+DataArticles$post_reach_viral_unique), digits = 4)
DataArticles$perc_viral <- round(DataArticles$post_reach_viral_unique/(DataArticles$post_reach_fan_unique+DataArticles$post_reach_viral_unique), digits = 4)
DataArticles$category <- as.factor(DataArticles$category)
DataArticles$ctr <- round(DataArticles$ctr, digits = 4)
DataArticles$interaction_rate <- round(DataArticles$interaction_rate, digits = 4)
leaderboard_posts_table <- DataArticles[,c("full_picture", "share_head", "created_time", "category", "link_clicks", "ctr", "post_reach", "perc_fan","perc_viral", "total_comments", "total_likes", "total_shares", "total_interactions", "interaction_rate", "times_repost", "author", "author_status")]
leaderboard_posts_table <- leaderboard_posts_table[order(leaderboard_posts_table$link_clicks, decreasing = TRUE), ]
colors <- c(brewer.pal(3, "Paired"))
datatable(cbind(' ' = '&oplus;', leaderboard_posts_table), filter = 'top', escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(visible = FALSE, targets = c(3, 4)), list(orderable = FALSE, className = 'details-control', targets = 0)), dom = "tip", drawCallback = I(draw.callback))) %>%
# formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
datatable(cbind(' ' = '&oplus;', leaderboard_posts_table), filter = 'top', escape = FALSE, rownames = FALSE, selection = "single", class = "compact", options = list(autoWidth = FALSE, scrollX = TRUE, pageLength = 25, columnDefs = list(list(visible = FALSE, targets = c(3, 4)), list(orderable = FALSE, className = 'details-control', targets = 0)), dom = "tip", drawCallback = I(draw.callback))) %>%
# formatStyle(columns = "author_status", target = "row", background = styleEqual(c("Contributor", "Old Staff", "Current Staff"), colors))%>%
formatStyle(0:16, fontWeight = 'bold') %>%
formatDate(columns = "created_time", method = "toDateString") %>%
formatPercentage(c("perc_fan", "perc_viral", "ctr", "interaction_rate"), 2) %>%
formatCurrency(c("link_clicks", "post_reach", "total_comments", "total_likes", "total_shares", "total_interactions"), '', digits = 0)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c(brewer.pal(3, "Paired"))
runApp()
runApp()
runApp()
runApp()
load("data/DataArticles.Rda")
load("data/DataArticlesBH.Rda")
load("data/DataArticlesFC.Rda")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
author_data <- DataArticles %>%
group_by(author) %>%
summarise(n = n(), link_clicks = sum(link_clicks)) %>%
arrange(-n, -link_clicks)
glimpse()
View(author_data)
hchart(mpgman3, "treemap", hcaes(x = author, value = n, color = link_clicks))
hchart(author_data, "treemap", hcaes(x = author, value = n, color = link_clicks))
hc <-highchart() %>%
# hc_chart(type = "treemap") %>%
hc_add_series(data = author_data, type = "treemap") %>%
hc_add_theme(hc_theme_smpl())
hc
hc <-highchart() %>%
# hc_chart(type = "treemap") %>%
hc_add_series(data = hcaes(x = author, value = n, color = link_clicks), type = "treemap") %>%
hc_add_theme(hc_theme_smpl())
hc
ds_author_data <- lapply(1:nrow(author_data), function(x){
list(name = author_data[x,]$author, value = author_data[x,]$n, colorValue = author_data[x,]$link_clicks)
})
hc <-highchart() %>%
# hc_chart(type = "treemap") %>%
hc_add_series(data = ds_author_data, type = "treemap") %>%
hc_add_theme(hc_theme_smpl())
hc
hc <-highchart() %>%
hc_colorAxis(minColor = '#FFFFFF', maxColor = JS("Highcharts.getOptions().colors[0]"))
hc_add_series(data = ds_author_data, type = "treemap") %>%
hc_add_theme(hc_theme_smpl())
hc
hc <-highchart() %>%
hc_colorAxis(minColor = '#FFFFFF', maxColor = JS("Highcharts.getOptions().colors[0]")) %>%
hc_add_series(data = ds_author_data, type = "treemap") %>%
hc_add_theme(hc_theme_smpl())
hc
hc <-highchart() %>%
hc_colorAxis(minColor = '#FFFFFF', maxColor = JS("Highcharts.getOptions().colors[0]")) %>%
hc_add_series(data = ds_author_data, type = "treemap") %>%
hc_plotOptions(treemap = list(borderColor = "black")) %>%
hc_tooltip(
hc_add_theme(hc_theme_smpl())
hc
hc <-highchart() %>%
hc_colorAxis(minColor = '#FFFFFF', maxColor = JS("Highcharts.getOptions().colors[0]")) %>%
hc_add_series(data = ds_author_data, type = "treemap") %>%
hc_plotOptions(treemap = list(borderColor = "black")) %>%
hc_add_theme(hc_theme_smpl())
hc
runApp()
runApp()
paste("function(){
return", '"',"<div style='width: 250px; white-space:normal;'>", '"', "+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='", "+ this.point.photo_url +","'",'title=""', 'alt="" border="0" height="250" width="250">', "'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'",
"}")
runApp()
runApp()
runApp()
runApp()
runApp()
hcopts <- getOption("highcharter.options")
hcopts
runApp()
options(highcharter.options = list(lang = list(thousandsSep  = "*")))
highcharter.options
getOption(highcharter.options)
hcopts <- getOption("highcharter.options")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
