{
    "collab_server" : "",
    "contents" : "# LIBRARIES ========================================================================================================================\n\nlibrary(ggplot2)\nlibrary(reshape)\nlibrary(scales)\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(viridis)\nlibrary(ggthemes)\nlibrary(RColorBrewer)\nlibrary(highcharter)\nlibrary(quantmod)\nlibrary(dtplyr)\nlibrary(data.table)\nlibrary(readr)\nlibrary(jsonlite)\nlibrary(DT)\nlibrary(RMySQL)\n\n\n# DATA LOAD ========================================================================================================================\n\n\nload(\"data/PostData.Rda\")\nload(\"data/DataArticles.Rda\")\nload(\"data/DataVideos.Rda\")\nload(\"data/DataPhotos.Rda\")\n\n# mydb = dbConnect(MySQL(), host = \"104.198.210.36\", user = \"root\", password = \"tacozombies54992\", db = \"analytics\")\n# \n# rs <- dbSendQuery(mydb, \"select * from CONTENT_TRACK\")\n# ContentTrack <- fetch(rs, -1)\n# \n# dbClearResult(rs)\n# dbDisconnect(mydb)\n\n# DataArticles <- merge(DataArticles, ContentTrack, by = \"status_id\", all.x = TRUE)\n\n\nDataArticles <- DataArticles[which(DataArticles$sponsored == 0),]\nDataArticles <- ddply(DataArticles, .(mitu_link), mutate, mother_id = status_id[created_time == min(created_time)])\n\nDataVideos <- DataVideos[which(DataVideos$sponsored == 0),]\nDataVideos <- ddply(DataVideos, .(video_repost_sharetext), mutate, mother_id = status_id[created_time == min(created_time)])\n\nDataArticles$days_bet_last_post_today <- Sys.Date() - as.Date(DataArticles$date)\nDataVideos$days_bet_last_post_today <- Sys.Date() - as.Date(DataVideos$date)\nDataPhotos$days_bet_last_post_today <- Sys.Date() - as.Date(DataPhotos$date)\n\n\nArticleRepoGroups <- DataArticles[which(DataArticles$average_ctr >= 0.035 | DataArticles$average_interaction_rate >= 0.01 | DataArticles$average_link_clicks >= 10000 | DataArticles$average_post_reach >= 350000),]\n\nArticleRepoCandidates <- ArticleRepoGroups[which(ArticleRepoGroups$times_repost == ArticleRepoGroups$repost_order | is.na(ArticleRepoGroups$times_repost)),]\n\nArticleTimesRepo <- unique(DataArticles[order(DataArticles$times_repost, decreasing = FALSE),]$times_repost)\nArticleTimesRepo <- ArticleTimesRepo[!is.na(ArticleTimesRepo)]\n\nArticleCategories <- as.character(unique(DataArticles[order(DataArticles$category, decreasing = FALSE),]$category))\n\n\nVideoRepoGroups <- DataVideos[which(DataVideos$average_views_rate >= 0.25 | DataVideos$average_interaction_rate >= 0.01 | DataVideos$average_video_views >= 1000000 | DataVideos$average_post_reach >= 2500000 | DataVideos$average_viral_fan_rate >= 3),]\n\nVideoRepoCandidates <- VideoRepoGroups[which(VideoRepoGroups$times_repost == VideoRepoGroups$repost_order | is.na(VideoRepoGroups$times_repost)),]\n\nVideoTimesRepo <- unique(DataVideos[order(DataVideos$times_repost, decreasing = FALSE),]$times_repost)\nVideoTimesRepo <- VideoTimesRepo[!is.na(VideoTimesRepo)]\n\nVideoCategories <- as.character(unique(DataVideos[order(DataVideos$category, decreasing = FALSE),]$category))\n\n\nMemeRepoGroups <- DataPhotos[which(DataPhotos$average_share_rate >= 0.05 | DataPhotos$average_interaction_rate >= 0.035 | DataPhotos$average_post_reach >= 1500000 | DataPhotos$average_viral_fan_rate >= 3),]\n\nMemeRepoCandidates <- MemeRepoGroups[which(MemeRepoGroups$times_repost == MemeRepoGroups$repost_order | is.na(MemeRepoGroups$times_repost)),]\n\nMemeTimesRepo <- unique(DataPhotos[order(DataPhotos$times_repost, decreasing = FALSE),]$times_repost)\nMemeTimesRepo <- MemeTimesRepo[!is.na(MemeTimesRepo)]\n\narticle_selected_choices <- c(\"ID\" = \"status_id\", \"FB Link\" = \"permalink\", \"Mitú Link\" = \"mitu_link\", \"Post Type\" = \"post_type\", \"Post Image\" = \"post_image\", \"Sharetext\" = \"sharetext\", \"Headline\" = \"headline\", \"Picture Link\" = \"full_picture\", \"Date Posted\" = \"date\", \"Hour Posted\" = \"hour\", \"Category\" = \"category\", \"Reach\" = \"post_reach\", \"Fan Reach\" = \"post_reach_fan_unique\", \"Viral Reach\" = \"post_reach_viral_unique\", \"Comments\" = \"total_comments\", \"Likes\" = \"total_likes\", \"Shares\" = \"total_shares\", \"Link Clicks\" = \"link_clicks\", \"Interaction Rate\" = \"interaction_rate\", \"CTR\" = \"ctr\", \"Viral/Fan Reach\" = \"viral_fan_rate\", \"Share Rate\" = \"share_rate\", \"Reposted\" = \"reposted\", \"Repost Order\" = \"repost_order\", \"Times Reposted\" = \"times_repost\", \"Days Between Repo\" = \"days_bet_repost\", \"Mother ID\" = \"mother_id\")\n\narticle_selected_cols <- as.factor(c(\"Post Image\" = \"post_image\", \"Headline\" = \"headline\", \"Category\" = \"category\", \"Date Posted\" = \"date\", \"Reach\" = \"post_reach\", \"Interaction Rate\" = \"interaction_rate\", \"Link Clicks\" = \"link_clicks\", \"CTR\" = \"ctr\", \"Times Reposted\" =\"times_repost\", \"Mother ID\" = \"mother_id\"))\n\nvideo_selected_choices <- c(\"ID\" = \"status_id\", \"FB Link\" = \"permalink\", \"Mitú Link\" = \"mitu_link\", \"Post Type\" = \"post_type\", \"Post Image\" = \"post_image\", \"Sharetext\" = \"sharetext\", \"Video Repost Sharetext\" = \"video_repost_sharetext\", \"Picture Link\" = \"full_picture\", \"Date Posted\" = \"date\", \"Hour Posted\" = \"hour\", \"Category\" = \"category\", \"Reach\" = \"post_reach\", \"Fan Reach\" = \"post_reach_fan_unique\", \"Viral Reach\" = \"post_reach_viral_unique\", \"Comments\" = \"total_comments\", \"Likes\" = \"total_likes\", \"Shares\" = \"total_shares\", \"Video Views\" = \"post_video_views\", \"Interaction Rate\" = \"interaction_rate\", \"Views Rate\" = \"views_rate\", \"Viral/Fan Reach\" = \"viral_fan_rate\", \"Share Rate\" = \"share_rate\", \"Reposted\" = \"reposted\", \"Repost Order\" = \"repost_order\", \"Times Reposted\" = \"times_repost\", \"Days Between Repo\" = \"days_bet_repost\", \"Mother ID\" = \"mother_id\")\n\nvideo_selected_cols <- as.factor(c(\"Post Image\" = \"post_image\", \"Sharetext\" = \"sharetext\", \"Category\" = \"category\", \"Date Posted\" = \"date\", \"Reach\" = \"post_reach\", \"Video Views\" = \"post_video_views\", \"Interaction Rate\" = \"interaction_rate\", \"Views Rate\" = \"views_rate\", \"Times Reposted\" =\"times_repost\", \"Mother ID\" = \"mother_id\"))\n\nmeme_selected_choices <- c(\"ID\" = \"status_id\", \"Mother ID\" = \"mother_id\",\"FB Link\" = \"permalink\", \"Mitú Link\" = \"mitu_link\", \"Post Type\" = \"post_type\", \"Post Image\" = \"post_image\", \"Sharetext\" = \"sharetext\", \"Image Text\" = \"image_text_py\", \"Picture Link\" = \"full_picture\", \"Date Posted\" = \"date\", \"Hour Posted\" = \"hour\", \"Reach\" = \"post_reach\", \"Fan Reach\" = \"post_reach_fan_unique\", \"Viral Reach\" = \"post_reach_viral_unique\", \"Comments\" = \"total_comments\", \"Likes\" = \"total_likes\", \"Shares\" = \"total_shares\", \"Interaction Rate\" = \"interaction_rate\", \"Viral/Fan Reach\" = \"viral_fan_rate\", \"Share Rate\" = \"share_rate\", \"Reposted\" = \"reposted\", \"Repost Order\" = \"repost_order\", \"Times Reposted\" = \"times_repost\", \"Days Between Repo\" = \"days_bet_repost\")\n\nmeme_selected_cols <- as.factor(c(\"Post Image\" = \"post_image\", \"Sharetext\" = \"sharetext\", \"Date Posted\" = \"date\", \"Reach\" = \"post_reach\", \"Comments\" = \"total_comments\", \"Likes\" = \"total_likes\", \"Shares\" = \"total_shares\", \"Interaction Rate\" = \"interaction_rate\", \"Share Rate\" = \"share_rate\", \"Times Reposted\" =\"times_repost\"))\n\n\n\n# UI ================================================================================================================================\n\n\nui <- dashboardPage(skin = \"blue\",\n                    \n                    # Dashboard Header ------------------------------------------------------------------------------------------------------------------     \n                    \n                    dashboardHeader(title = \"Repost App\"),\n                    \n                    # Dashboard Sidebar -----------------------------------------------------------------------------------------------------------------\n                    \n                    dashboardSidebar(\n                      \n                      tags$head(tags$style(HTML(\".sidebar { height: 200vh; }\"))),\n                      \n                      sidebarMenu(\n                        \n                        menuItem(\"Articles\", tabName = \"articles_reposts\", icon = icon(\"fa fa-file-text-o\")),\n                        menuItem(\"Videos\", tabName = \"videos_reposts\", icon = icon(\"fa fa-film\")),\n                        menuItem(\"Memes\", tabName = \"memes_reposts\", icon = icon(\"fa fa-picture-o\"))\n                        \n                      )\n                    ),\n                    \n                    # Dashboard Body --------------------------------------------------------------------------------------------------------------------               \n                    dashboardBody(fluidRow(\n                      \n                      tabItems(\n                        \n                        #  1. Articles Repost -----------------------------------------------------------------------------------------------------------   \n                        \n                        tabItem(tabName = \"articles_reposts\", fluidRow(\n                          \n                          tabBox( title = \"\",\n                                  \n                                  \n                                  #  1.1 Articles Repost Suggestions ------------------------------------------------------------------------------------\n                                  tabPanel(\"Repost Suggestions\",\n                                           \n                                           box(title = \"Benchmarks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               \n                                               column(3,\n                                                      column(12, selectizeInput(inputId = \"article_times_reposted\", label = \"Times Reposted:\", choices = c(\"All\", 0, ArticleTimesRepo), selected = \"All\", multiple = FALSE)),\n                                                      \n                                                      column(12, selectizeInput(inputId = \"article_categories\", label = \"Categories:\", choices = c(\"All\", ArticleCategories), selected = \"All\", multiple = FALSE)),\n                                                      \n                                                      column(12, numericInput(\"article_num_of_repost\", label = \"Number of Repost Suggestions:\", value = 10,  width = \"100%\"))\n                                               ),\n                                               \n                                               column(3, sliderInput(\"article_ctr_bench\", checkboxInput(\"article_ctr_box\", label = strong(\"Click-Through Rate:\"), value = TRUE), min=2, max=5, value=3.5, step = 0.5, post = \" %\")),\n                                               \n                                               column(3, sliderInput(\"article_ir_bench\", checkboxInput(\"article_ir_box\", label = strong(\"Interaction Rate:\"), value = TRUE), min = 0.5, max = 2.5, value = 1, step= 0.5, post = \" %\")),\n                                               \n                                               column(3, sliderInput(\"article_reach_bench\", checkboxInput(\"article_reach_box\", label = strong(\"Reach:\"), value = TRUE), min = 200000, max = 500000, value = 350000, step = 50000)),\n                                               \n                                               column(3, sliderInput(\"article_clicks_bench\", checkboxInput(\"article_clicks_box\", label = strong(\"Link Clicks:\"), value = TRUE), min = 5000, max = 20000, value = 10000, step = 2500)),\n                                               \n                                               column(3, sliderInput(\"article_days_bet_repo_bench\", checkboxInput(\"article_days_bet_repo_box\", label = strong(\"Days Since Last Time Posted:\"), value = TRUE), min=0, max=120, value=c(30, 60), step = 1, post = \" days\")),\n                                               \n                                               column(3, actionButton(\"article_repost_sugg_button\", strong(\"Repo!\"), width = \"100%\", style = \"height:120px\")),\n                                               \n                                               br(),\n                                               br(),\n                                               \n                                               column(12,selectInput(\"article_show_vars_table_1\", strong(\"Variables\"), choices = article_selected_choices, selected = article_selected_cols, multiple = TRUE)),\n                                               column(12, DT::dataTableOutput(\"articles_table_1\"))),\n                                           \n                                           conditionalPanel(\n                                             condition = \"input.articles_table_1_rows_selected != null && input.articles_table_1_rows_selected != 0\",\n                                             box(title = \"Breakdown\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                 column(1,htmlOutput(\"article_picture_selected_1\")),\n                                                 column(11,highchartOutput(\"article_title_selected_1\", height = 150)),\n                                                 column(4,highchartOutput(\"articles_plot_selected_1\")),\n                                                 column(4,highchartOutput(\"articles_plot_selected_2\")),\n                                                 column(4,highchartOutput(\"articles_plot_selected_3\")),\n                                                 column(12,\n                                                               # selectizeInput(\"article_show_vars_repost_selected_1\", strong(\"Variables\"), names(DataArticles),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                               DT::dataTableOutput(\"articles_table_repost_selected_1\"))\n                                             ))\n                                  ),\n                                  \n                                  \n                                  #  1.2 Articles Repost Candidates -------------------------------------------------------------------------------------\n                                  tabPanel(\"Repost Candidates\",\n                                           \n                                           box(title = \"\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               \n                                               selectizeInput(\"article_show_vars_table_2\", strong(\"Variables\"), choices = article_selected_choices, selected = article_selected_cols, multiple = TRUE ),\n                                               \n                                               DT::dataTableOutput(\"articles_table_2\")),\n                                           \n                                           conditionalPanel(\n                                             condition = \"input.articles_table_2_rows_selected != 0\",\n                                             box( title = \"\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                  \n                                                  column(1,htmlOutput(\"article_picture_selected_2\")),\n                                                  column(11,highchartOutput(\"article_title_selected_2\", height = 150)),\n                                                  column(4,highchartOutput(\"articles_plot_selected_4\")),\n                                                  column(4,highchartOutput(\"articles_plot_selected_5\")),\n                                                  column(4,highchartOutput(\"articles_plot_selected_6\")),\n                                                  column(12,DT::dataTableOutput(\"articles_table_repost_selected_2\"))\n                                             ))\n                                  ),\n                                  \n                                  \n                                  #  1.3 Articles Repost Groups -----------------------------------------------------------------------------------------                    \n                                  tabPanel(\"Repost Groups\",\n                                           \n                                           box(title = \"\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               \n                                               selectizeInput(\"article_show_vars_table_3\", strong(\"Variables\"), article_selected_choices, selected = article_selected_cols, multiple = TRUE ),\n                                               \n                                               DT::dataTableOutput(\"articles_table_3\"))\n                                           \n                                  )\n                                  \n                                  , width = 12))),\n                        \n                        \n                        #  2. Videos Repost -----------------------------------------------------------------------------------------------------------   \n                        \n                        tabItem(tabName = \"videos_reposts\", fluidRow(\n                          \n                          tabBox( title = \"\",\n                                  \n                                  \n                                  #  2.1 Videos Repost Suggestions ------------------------------------------------------------------------------------\n                                  tabPanel(\"Repost Suggestions\",\n                                           \n                                           box(title = \"Benchmarks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               \n                                               column(3,\n                                                      column(12, selectizeInput(inputId = \"video_type\", label = \"Video Type:\", choices = c(\"All\", \"Video\", \"Video Meme\"), selected = \"All\", multiple = FALSE)),\n                                                      \n                                                      column(12, selectizeInput(inputId = \"video_times_reposted\", label = \"Times Reposted:\", choices = c(\"All\", 0, VideoTimesRepo), selected = \"All\", multiple = FALSE)),\n                                                      \n                                                      column(12, selectizeInput(inputId = \"video_categories\", label = \"Categories:\", choices = c(\"All\", VideoCategories), selected = \"All\", multiple = FALSE)),\n                                                      \n                                                      column(12, numericInput(\"video_num_of_repost\", label = \"Number of Repost Suggestions:\", value = 5,  width = \"100%\"))\n                                               ),\n                                               \n                                               column(3, sliderInput(\"video_views_rate_bench\", checkboxInput(\"video_views_rate_box\", label = strong(\"Views Rate:\"), value = TRUE), min=10, max=50, value=25, step = 5, post = \" %\")),\n                                               \n                                               column(3, sliderInput(\"video_ir_bench\", checkboxInput(\"video_ir_box\", label = strong(\"Interaction Rate:\"), value = TRUE), min = 0.5, max = 5, value = 3.5, step= 0.5, post = \" %\")),\n                                               \n                                               column(3, sliderInput(\"video_reach_bench\", checkboxInput(\"video_reach_box\", label = strong(\"Reach:\"), value = TRUE), min = 1000000, max = 15000000, value = 2500000, step = 500000)),\n                                               \n                                               column(3, sliderInput(\"video_viral_fan_rate_bench\", checkboxInput(\"video_viral_fan_rate_box\", label = strong(\"Viral/Fan Reach:\"), value = TRUE), min = 0.5, max = 10, value = 3, step= 0.5)),\n                                               \n                                               column(3, sliderInput(\"video_views_bench\", checkboxInput(\"video_views_box\", label = strong(\"Video Views:\"), value = TRUE), min = 500000, max = 5000000, value = 1000000, step = 500000)),\n                                               \n                                               column(3, sliderInput(\"video_days_bet_repo_bench\", checkboxInput(\"video_days_bet_repo_box\", label = strong(\"Days Since Last Time Posted:\"), value = TRUE), min=0, max=120, value=c(30, 60), step = 1, post = \" days\")),\n                                               \n                                               column(9, actionButton(\"video_repost_sugg_button\", strong(\"Repo!\"), width = \"100%\", style = \"height:50px\")),\n                                               \n                                               br(),\n                                               br(),\n                                               \n                                               column(12,selectizeInput(\"video_show_vars_table_1\", strong(\"Variables\"), choices = video_selected_choices, selected = video_selected_cols, multiple = TRUE )),\n                                               column(12, DT::dataTableOutput(\"videos_table_1\"))),\n                                           \n                                           conditionalPanel(\n                                             condition = \"input.videos_table_1_rows_selected != null && input.videos_table_1_rows_selected != 0\",\n                                             box(title = \"Breakdown\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                 column(1,htmlOutput(\"video_picture_selected_1\")),\n                                                 column(11,highchartOutput(\"video_title_selected_1\", height = 150)),\n                                                 column(4,highchartOutput(\"videos_plot_selected_1\")),\n                                                 column(4,highchartOutput(\"videos_plot_selected_2\")),\n                                                 column(4,highchartOutput(\"videos_plot_selected_3\"))\n                                                 # column(12,\n                                                 #        #        selectizeInput(\"video_show_vars_repost_selected_1\", strong(\"Variables\"), names(DataVideos),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                 #        #        DT::dataTableOutput(\"videos_table_repost_selected_1\"))\n                                             ))\n                                  ),\n                                  \n                                  \n                                  #  2.2 Videos Repost Candidates -------------------------------------------------------------------------------------\n                                  tabPanel(\"Repost Candidates\",\n                                           \n                                           box(title = \"\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               \n                                               selectizeInput(\"video_show_vars_table_2\", strong(\"Variables\"), choices = video_selected_choices, selected = video_selected_cols, multiple = TRUE ),\n                                               \n                                               DT::dataTableOutput(\"videos_table_2\")),\n                                           \n                                           conditionalPanel(\n                                             condition = \"input.videos_table_2_rows_selected != 0\",\n                                             box( title = \"\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                  \n                                                  column(1,htmlOutput(\"video_picture_selected_2\")),\n                                                  column(11,highchartOutput(\"video_title_selected_2\", height = 150)),\n                                                  column(4,highchartOutput(\"videos_plot_selected_4\")),\n                                                  column(4,highchartOutput(\"videos_plot_selected_5\")),\n                                                  column(4,highchartOutput(\"videos_plot_selected_6\"))\n                                                  #        # column(12,\n                                                  #        #        selectizeInput(\"video_show_vars_repost_selected_2\", strong(\"Variables\"), names(DataVideos),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                  #        #        DT::dataTableOutput(\"videos_table_repost_selected_2\"))\n                                             ))\n                                  ),\n                                  \n                                  \n                                  #  2.3 Videos Repost Groups -----------------------------------------------------------------------------------------                \n                                  \n                                  tabPanel(\"Repost Groups\",\n                                           \n                                           box(title = \"\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               \n                                               selectizeInput(\"video_show_vars_table_3\", strong(\"Variables\"), choices = video_selected_choices, selected = video_selected_cols, multiple = TRUE ),\n                                               \n                                               DT::dataTableOutput(\"videos_table_3\")\n                                               \n                                           )\n                                  )\n                                  \n                                  , width = 12))),\n                        \n                        \n                        #  3. Memes Repost -----------------------------------------------------------------------------------------------------------   \n                        tabItem(tabName = \"memes_reposts\", fluidRow(\n                          \n                          tabBox( title = \"\",\n                                  \n                                  \n                                  #  3.1 Memes Repost Suggestions ------------------------------------------------------------------------------------\n                                  tabPanel(\"Repost Suggestions\",\n                                           \n                                           box(title = \"Benchmarks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               \n                                               column(3,\n                                                      \n                                                      column(12, selectizeInput(inputId = \"meme_times_reposted\", label = \"Times Reposted:\", choices = c(\"All\", 0, MemeTimesRepo), selected = \"All\", multiple = FALSE)),\n                                                      \n                                                      column(12, numericInput(\"meme_num_of_repost\", label = \"Number of Repost Suggestions:\", value = 10,  width = \"100%\"))\n                                               ),\n                                               \n                                               column(3, sliderInput(\"meme_share_rate_bench\", checkboxInput(\"meme_share_rate_box\", label = strong(\"Share Rate:\"), value = TRUE), min=0.5, max=30, value=5, step = 5, post = \" %\")),\n                                               \n                                               column(3, sliderInput(\"meme_ir_bench\", checkboxInput(\"meme_ir_box\", label = strong(\"Interaction Rate:\"), value = TRUE), min = 0.5, max = 8, value = 3.5, step= 0.5, post = \" %\")),\n                                               \n                                               column(3, sliderInput(\"meme_reach_bench\", checkboxInput(\"meme_reach_box\", label = strong(\"Reach:\"), value = TRUE), min = 1000000, max = 8000000, value = 1500000, step = 500000)),\n                                               \n                                               column(3, sliderInput(\"meme_viral_fan_rate_bench\", checkboxInput(\"meme_viral_fan_rate_box\", label = strong(\"Viral/Fan Reach:\"), value = TRUE), min = 0.5, max = 10, value = 3, step= 0.5)),\n                                               \n                                               column(3, sliderInput(\"meme_days_bet_repo_bench\", checkboxInput(\"meme_days_bet_repo_box\", label = strong(\"Days Since Last Time Posted:\"), value = TRUE), min=0, max=120, value=c(30, 60), step = 1, post = \" days\")),\n                                               \n                                               column(3, actionButton(\"meme_repost_sugg_button\", strong(\"Repo!\"), width = \"100%\", style = \"height:120px\")),\n                                               \n                                               br(),\n                                               br(),\n                                               \n                                               column(12,selectizeInput(\"meme_show_vars_table_1\", strong(\"Variables\"), choices = meme_selected_choices, selected = meme_selected_cols, multiple = TRUE )),\n                                               column(12, DT::dataTableOutput(\"memes_table_1\"))),\n                                           \n                                           conditionalPanel(\n                                             condition = \"input.memes_table_1_rows_selected != null && input.memes_table_1_rows_selected != 0\",\n                                             box(title = \"Breakdown\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                 column(1,htmlOutput(\"meme_picture_selected_1\")),\n                                                 column(11,highchartOutput(\"meme_title_selected_1\", height = 150)),\n                                                 column(4,highchartOutput(\"memes_plot_selected_1\")),\n                                                 column(4,highchartOutput(\"memes_plot_selected_2\")),\n                                                 column(4,highchartOutput(\"memes_plot_selected_3\"))\n                                                 # column(12,\n                                                 #        #        selectizeInput(\"meme_show_vars_repost_selected_1\", strong(\"Variables\"), names(DataVideos),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                 #        #        DT::dataTableOutput(\"memes_table_repost_selected_1\"))\n                                             ))\n                                  ),\n                                  \n                                  \n                                  #  3.2 Memes Repost Candidates -------------------------------------------------------------------------------------\n                                  tabPanel(\"Repost Candidates\",\n                                           \n                                           box(title = \"\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               \n                                               selectizeInput(\"meme_show_vars_table_2\", strong(\"Variables\"), choices = meme_selected_choices, selected = meme_selected_cols, multiple = TRUE ),\n                                               \n                                               DT::dataTableOutput(\"memes_table_2\")),\n                                           \n                                           conditionalPanel(\n                                             condition = \"input.memes_table_2_rows_selected != 0\",\n                                             box( title = \"\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                                  \n                                                  column(1,htmlOutput(\"meme_picture_selected_2\")),\n                                                  column(11,highchartOutput(\"meme_title_selected_2\", height = 150)),\n                                                  column(4,highchartOutput(\"memes_plot_selected_4\")),\n                                                  column(4,highchartOutput(\"memes_plot_selected_5\")),\n                                                  column(4,highchartOutput(\"memes_plot_selected_6\"))\n                                                  #        # column(12,\n                                                  #        #        selectizeInput(\"meme_show_vars_repost_selected_2\", strong(\"Variables\"), names(DataVideos),selected = c(\"headline\",\"date\",\"post_reach\",\"interaction_rate\",\"link_clicks\",\"ctr\", \"times_repost\"), multiple = TRUE ),\n                                                  #        #        DT::dataTableOutput(\"memes_table_repost_selected_2\"))\n                                             ))\n                                  ),\n                                  \n                                  \n                                  #  3.3 Memes Repost Groups -----------------------------------------------------------------------------------------                \n                                  \n                                  tabPanel(\"Repost Groups\",\n                                           \n                                           box(title = \"\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               \n                                               selectizeInput(\"meme_show_vars_table_3\", strong(\"Variables\"), choices = meme_selected_choices, selected = meme_selected_cols, multiple = TRUE ),\n                                               \n                                               DT::dataTableOutput(\"memes_table_3\")\n                                           )\n                                  )\n                                  \n                                  , width = 12)))\n                        \n                        \n                        \n                        \n                        \n                      )))\n)\n\n\n\n\n# SERVER  ===========================================================================================================================\n\nserver <- function(input, output, session){\n  \n  \n  # 1. Reactive Data ------------------------------------------------------------------------------------------------------------------  \n  article_repost_candidates <- reactive({\n    \n    ifelse(any(c(input$article_ctr_box, input$article_ir_box, input$article_clicks_box, input$article_reach_box)), \n           \n           ArticleRepoGroups <- DataArticles[which(input$article_ctr_box*(DataArticles$average_ctr >= input$article_ctr_bench/100) | input$article_ir_box*(DataArticles$average_interaction_rate >= input$article_ir_bench/100) | input$article_clicks_box*(DataArticles$average_link_clicks >= input$article_clicks_bench) | input$article_reach_box*(DataArticles$average_post_reach >= input$article_reach_bench)),],\n           \n           ArticleRepoGroups <- DataArticles\n    )\n    \n    ArticleRepoCandidates <- ArticleRepoGroups[which(ArticleRepoGroups$times_repost == ArticleRepoGroups$repost_order | is.na(ArticleRepoGroups$times_repost)),]\n    \n    \n    ArticleRepoCandidates$headline <- paste0(\"<a href='\",as.character(ArticleRepoCandidates$mitu_link),\"' target='_blank'>\",as.character(ArticleRepoCandidates$headline),\"</a>\")\n    ArticleRepoCandidates$sharetext <- paste0(\"<a href='\",as.character(ArticleRepoCandidates$permalink),\"' target='_blank'>\",as.character(ArticleRepoCandidates$sharetext),\"</a>\")\n    ArticleRepoCandidates$permalink <- paste0(\"<a href='\",ArticleRepoCandidates$permalink,\"' target='_blank'>\",ArticleRepoCandidates$permalink,\"</a>\")\n    ArticleRepoCandidates$mitu_link <- paste0(\"<a href='\",ArticleRepoCandidates$mitu_link,\"' target='_blank'>\",ArticleRepoCandidates$mitu_link,\"</a>\")\n    ArticleRepoCandidates$post_reach <- format(ArticleRepoCandidates$post_reach, big.mark = \",\")\n    ArticleRepoCandidates$link_clicks <- format(ArticleRepoCandidates$link_clicks, big.mark = \",\")\n    ArticleRepoCandidates$average_post_reach <- format(ArticleRepoCandidates$average_post_reach, big.mark = \",\")\n    ArticleRepoCandidates$average_link_clicks <- format(ArticleRepoCandidates$average_link_clicks, big.mark = \",\", digits = 2, nsmall = 2)\n    \n    ArticleRepoCandidates$ctr <- paste0(formatC(100 * ArticleRepoCandidates$ctr, format = \"f\", digits = 2), \"%\")\n    ArticleRepoCandidates$interaction_rate <- paste0(formatC(100 * ArticleRepoCandidates$interaction_rate, format = \"f\", digits = 2), \"%\")\n    ArticleRepoCandidates$average_ctr <- paste0(formatC(100 * ArticleRepoCandidates$average_ctr, format = \"f\", digits = 2), \"%\")\n    ArticleRepoCandidates$average_interaction_rate <- paste0(formatC(100 * ArticleRepoCandidates$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    \n    ifelse(input$article_days_bet_repo_box == TRUE,\n           \n           ArticleRepoCandidates <- ArticleRepoCandidates[which(ArticleRepoCandidates$days_bet_last_post_today >= input$article_days_bet_repo_bench[1] & ArticleRepoCandidates$days_bet_last_post_today <= input$article_days_bet_repo_bench[2]),],\n           \n           ArticleRepoCandidates <- ArticleRepoCandidates\n    )\n    \n    ArticleRepoCandidates\n    \n  })\n  \n  article_repost_suggestions <- reactive({\n    \n    \n    if(input$article_repost_sugg_button){\n      \n      ArticleRepoCandidates <- article_repost_candidates()\n      \n      if(input$article_times_reposted == \"All\"){\n        \n        if(input$article_categories == \"All\"){\n          \n          ArticleRepoCandidates <- ArticleRepoCandidates[sample(1: nrow(ArticleRepoCandidates), min(input$article_num_of_repost, nrow(ArticleRepoCandidates)), replace = FALSE),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[order(ArticleRepoCandidates$ctr, decreasing = TRUE),]\n          ArticleRepoCandidates\n          \n        }\n        \n        else {\n          \n          ArticleRepoCandidates <- ArticleRepoCandidates[which(ArticleRepoCandidates$category == input$article_categories),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[sample(1: nrow(ArticleRepoCandidates), min(input$article_num_of_repost, nrow(ArticleRepoCandidates)), replace = FALSE),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[order(ArticleRepoCandidates$ctr, decreasing = TRUE),]\n          ArticleRepoCandidates\n          \n        }\n      }\n      \n      else if (input$article_times_reposted == 0){\n        \n        if(input$article_categories == \"All\"){\n          \n          ArticleRepoCandidates <- ArticleRepoCandidates[is.na(ArticleRepoCandidates$times_repost),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[sample(1: nrow(ArticleRepoCandidates), min(input$article_num_of_repost, nrow(ArticleRepoCandidates)), replace = FALSE),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[order(ArticleRepoCandidates$ctr, decreasing = TRUE),]\n          ArticleRepoCandidates\n          \n        }\n        \n        else {\n          \n          ArticleRepoCandidates <- ArticleRepoCandidates[which(ArticleRepoCandidates$category == input$article_categories),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[is.na(ArticleRepoCandidates$times_repost),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[sample(1: nrow(ArticleRepoCandidates), min(input$article_num_of_repost, nrow(ArticleRepoCandidates)), replace = FALSE),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[order(ArticleRepoCandidates$ctr, decreasing = TRUE),]\n          ArticleRepoCandidates\n          \n        }\n      }\n      \n      else {\n        \n        if(input$article_categories == \"All\"){\n          \n          ArticleRepoCandidates <- ArticleRepoCandidates[which(ArticleRepoCandidates$times_repost == as.integer(input$article_times_reposted)),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[sample(1: nrow(ArticleRepoCandidates), min(input$article_num_of_repost, nrow(ArticleRepoCandidates)), replace = FALSE),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[order(ArticleRepoCandidates$ctr, decreasing = TRUE),]\n          ArticleRepoCandidates\n          \n        }\n        \n        else {\n          \n          ArticleRepoCandidates <- ArticleRepoCandidates[which(ArticleRepoCandidates$category == input$article_categories),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[which(ArticleRepoCandidates$times_repost == as.integer(input$article_times_reposted)),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[sample(1: nrow(ArticleRepoCandidates), min(input$article_num_of_repost, nrow(ArticleRepoCandidates)), replace = FALSE),]\n          ArticleRepoCandidates <- ArticleRepoCandidates[order(ArticleRepoCandidates$ctr, decreasing = TRUE),]\n          ArticleRepoCandidates\n          \n        }\n      }\n    }\n  })\n  \n  \n  video_repost_candidates <- reactive({\n    \n    ifelse(any(c(input$video_views_rate_box, input$video_ir_box, input$video_reach_box, input$video_viral_fan_rate_box, input$video_views_box)),\n           \n           VideoRepoGroups <- DataVideos[which(input$video_views_rate_box*(DataVideos$average_views_rate >= input$video_views_rate_bench/100) | input$video_ir_box*(DataVideos$average_interaction_rate >= input$video_ir_bench/100) | input$video_views_box*(DataVideos$average_video_views >= input$video_views_bench) | input$video_reach_box*(DataVideos$average_post_reach >= input$video_reach_bench) | input$video_viral_fan_rate_box*(DataVideos$average_viral_fan_rate >= input$video_viral_fan_rate_bench)),],\n           \n           VideoRepoGroups <- DataVideos\n    )\n    \n    VideoRepoCandidates <- VideoRepoGroups[which(VideoRepoGroups$times_repost == VideoRepoGroups$repost_order | is.na(VideoRepoGroups$times_repost)),]\n    \n    VideoRepoCandidates$sharetext <- paste0(\"<a href='\",as.character(VideoRepoCandidates$permalink),\"' target='_blank'>\",as.character(VideoRepoCandidates$sharetext),\"</a>\")\n    VideoRepoCandidates$permalink <- paste0(\"<a href='\",VideoRepoCandidates$permalink,\"' target='_blank'>\",VideoRepoCandidates$permalink,\"</a>\")\n    VideoRepoCandidates$post_reach <- format(VideoRepoCandidates$post_reach, big.mark = \",\")\n    VideoRepoCandidates$post_video_views <- format(VideoRepoCandidates$post_video_views, big.mark = \",\")\n    VideoRepoCandidates$average_post_reach <- format(VideoRepoCandidates$average_post_reach, big.mark = \",\")\n    VideoRepoCandidates$average_video_views <- format(VideoRepoCandidates$average_video_views, big.mark = \",\", digits = 2, nsmall = 2)\n    \n    VideoRepoCandidates$views_rate <-paste0(formatC(100 * VideoRepoCandidates$views_rate, format = \"f\", digits = 2), \"%\")\n    VideoRepoCandidates$interaction_rate <- paste0(formatC(100 * VideoRepoCandidates$interaction_rate, format = \"f\", digits = 2), \"%\")\n    VideoRepoCandidates$average_views_rate <- paste0(formatC(100 * VideoRepoCandidates$average_views_rate, format = \"f\", digits = 2), \"%\")\n    VideoRepoCandidates$average_interaction_rate <- paste0(formatC(100 * VideoRepoCandidates$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    VideoRepoCandidates$viral_fan_rate <- paste0(formatC(100 * VideoRepoCandidates$viral_fan_rate, format = \"f\", digits = 2))\n    VideoRepoCandidates$average_viral_fan_rate <- paste0(formatC(100 * VideoRepoCandidates$average_viral_fan_rate, format = \"f\", digits = 2))\n    \n    ifelse(input$video_days_bet_repo_box == TRUE,\n           \n           VideoRepoCandidates <- VideoRepoCandidates[which(VideoRepoCandidates$days_bet_last_post_today >= input$video_days_bet_repo_bench[1] & VideoRepoCandidates$days_bet_last_post_today <= input$video_days_bet_repo_bench[2]), ],\n           \n           VideoRepoCandidates <- VideoRepoCandidates\n    )\n    \n    VideoRepoCandidates\n    \n  })\n  \n  video_repost_suggestions <- reactive({\n    \n    \n    if(input$video_repost_sugg_button){\n      \n      VideoRepoCandidates <- video_repost_candidates()\n      \n      if(input$video_type == \"Video\"){\n        \n        VideoRepoCandidates <- VideoRepoCandidates[which(VideoRepoCandidates$video_meme == 0),]\n        \n      }\n      \n      else if(input$video_type == \"Video Meme\"){\n        \n        VideoRepoCandidates <- VideoRepoCandidates[which(VideoRepoCandidates$video_meme == 1),]\n        \n      }\n      \n      if(input$video_times_reposted == \"All\"){\n        \n        if(input$video_categories == \"All\"){\n          \n          VideoRepoCandidates <- VideoRepoCandidates[sample(1: nrow(VideoRepoCandidates), min(input$video_num_of_repost, nrow(VideoRepoCandidates)), replace = FALSE),]\n          VideoRepoCandidates <- VideoRepoCandidates[order(VideoRepoCandidates$post_video_views, decreasing = TRUE),]\n          VideoRepoCandidates\n          \n        }\n        \n        else {\n          \n          VideoRepoCandidates <- VideoRepoCandidates[which(VideoRepoCandidates$category == input$video_categories),]\n          VideoRepoCandidates <- VideoRepoCandidates[sample(1: nrow(VideoRepoCandidates), min(input$video_num_of_repost, nrow(VideoRepoCandidates)), replace = FALSE),]\n          VideoRepoCandidates <- VideoRepoCandidates[order(VideoRepoCandidates$post_video_views, decreasing = TRUE),]\n          VideoRepoCandidates\n          \n        }\n      }\n      \n      else if (input$video_times_reposted == 0){\n        \n        if(input$video_categories == \"All\"){\n          \n          VideoRepoCandidates <- VideoRepoCandidates[is.na(VideoRepoCandidates$times_repost),]\n          VideoRepoCandidates <- VideoRepoCandidates[sample(1: nrow(VideoRepoCandidates), min(input$video_num_of_repost, nrow(VideoRepoCandidates)), replace = FALSE),]\n          VideoRepoCandidates <- VideoRepoCandidates[order(VideoRepoCandidates$post_video_views, decreasing = TRUE),]\n          VideoRepoCandidates\n          \n        }\n        \n        else {\n          \n          VideoRepoCandidates <- VideoRepoCandidates[which(VideoRepoCandidates$category == input$video_categories),]\n          VideoRepoCandidates <- VideoRepoCandidates[is.na(VideoRepoCandidates$times_repost),]\n          VideoRepoCandidates <- VideoRepoCandidates[sample(1: nrow(VideoRepoCandidates), min(input$video_num_of_repost, nrow(VideoRepoCandidates)), replace = FALSE),]\n          VideoRepoCandidates <- VideoRepoCandidates[order(VideoRepoCandidates$post_video_views, decreasing = TRUE),]\n          VideoRepoCandidates\n          \n        }\n      }\n      \n      else {\n        \n        if(input$video_categories == \"All\"){\n          \n          VideoRepoCandidates <- VideoRepoCandidates[which(VideoRepoCandidates$times_repost == as.integer(input$video_times_reposted)),]\n          VideoRepoCandidates <- VideoRepoCandidates[sample(1: nrow(VideoRepoCandidates), min(input$video_num_of_repost, nrow(VideoRepoCandidates)), replace = FALSE),]\n          VideoRepoCandidates <- VideoRepoCandidates[order(VideoRepoCandidates$post_video_views, decreasing = TRUE),]\n          VideoRepoCandidates\n          \n        }\n        \n        else {\n          \n          VideoRepoCandidates <- VideoRepoCandidates[which(VideoRepoCandidates$category == input$video_categories),]\n          VideoRepoCandidates <- VideoRepoCandidates[which(VideoRepoCandidates$times_repost == as.integer(input$video_times_reposted)),]\n          VideoRepoCandidates <- VideoRepoCandidates[sample(1: nrow(VideoRepoCandidates), min(input$video_num_of_repost, nrow(VideoRepoCandidates)), replace = FALSE),]\n          VideoRepoCandidates <- VideoRepoCandidates[order(VideoRepoCandidates$post_video_views, decreasing = TRUE),]\n          VideoRepoCandidates\n          \n        }\n      }\n    }\n  })\n  \n  \n  meme_repost_candidates <- reactive({\n    \n    ifelse(any(c(input$meme_share_rate_box, input$meme_ir_box, input$meme_reach_box, input$meme_viral_fan_rate_box)),\n           \n           MemeRepoGroups <- DataPhotos[which(input$meme_share_rate_box*(DataPhotos$average_share_rate >= input$meme_share_rate_bench/100) | input$meme_ir_box*(DataPhotos$average_interaction_rate >= input$meme_ir_bench/100) | input$meme_reach_box*(DataPhotos$average_post_reach >= input$meme_reach_bench) | input$meme_viral_fan_rate_box*(DataPhotos$average_viral_fan_rate >= input$meme_viral_fan_rate_bench)),],\n           \n           MemeRepoGroups <- DataPhotos\n    )\n    \n    MemeRepoCandidates <- MemeRepoGroups[which(MemeRepoGroups$times_repost == MemeRepoGroups$repost_order | is.na(MemeRepoGroups$times_repost)),]\n    \n    MemeRepoCandidates$sharetext <- paste0(\"<a href='\",as.character(MemeRepoCandidates$permalink),\"' target='_blank'>\",as.character(MemeRepoCandidates$sharetext),\"</a>\")\n    MemeRepoCandidates$permalink <- paste0(\"<a href='\",MemeRepoCandidates$permalink,\"' target='_blank'>\",MemeRepoCandidates$permalink,\"</a>\")\n    MemeRepoCandidates$post_reach <- format(MemeRepoCandidates$post_reach, big.mark = \",\")\n    MemeRepoCandidates$average_post_reach <- format(MemeRepoCandidates$average_post_reach, big.mark = \",\")\n    \n    MemeRepoCandidates$share_rate <-paste0(formatC(100 * MemeRepoCandidates$share_rate, format = \"f\", digits = 2), \"%\")\n    MemeRepoCandidates$interaction_rate <- paste0(formatC(100 * MemeRepoCandidates$interaction_rate, format = \"f\", digits = 2), \"%\")\n    MemeRepoCandidates$average_share_rate <- paste0(formatC(100 * MemeRepoCandidates$average_share_rate, format = \"f\", digits = 2), \"%\")\n    MemeRepoCandidates$average_interaction_rate <- paste0(formatC(100 * MemeRepoCandidates$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    MemeRepoCandidates$viral_fan_rate <- paste0(formatC(100 * MemeRepoCandidates$viral_fan_rate, format = \"f\", digits = 2))\n    MemeRepoCandidates$average_viral_fan_rate <- paste0(formatC(100 * MemeRepoCandidates$average_viral_fan_rate, format = \"f\", digits = 2))\n    \n    ifelse(input$meme_days_bet_repo_box == TRUE,\n           \n           MemeRepoCandidates <- MemeRepoCandidates[which(MemeRepoCandidates$days_bet_last_post_today >= input$meme_days_bet_repo_bench[1] & MemeRepoCandidates$days_bet_last_post_today <= input$meme_days_bet_repo_bench[2]), ],\n           \n           MemeRepoCandidates <- MemeRepoCandidates\n    )\n    \n    MemeRepoCandidates\n    \n  })\n  \n  meme_repost_suggestions <- reactive({\n    \n    if(input$meme_repost_sugg_button){\n      \n      MemeRepoCandidates <- meme_repost_candidates()\n      \n      if(input$meme_times_reposted == \"All\"){\n        \n        MemeRepoCandidates <- MemeRepoCandidates[sample(1: nrow(MemeRepoCandidates), min(input$meme_num_of_repost, nrow(MemeRepoCandidates)), replace = FALSE),]\n        MemeRepoCandidates <- MemeRepoCandidates[order(MemeRepoCandidates$post_reach, decreasing = TRUE),]\n        MemeRepoCandidates\n        \n      }\n      \n      else if (input$meme_times_reposted == 0){\n        \n        MemeRepoCandidates <- MemeRepoCandidates[is.na(MemeRepoCandidates$times_repost),]\n        MemeRepoCandidates <- MemeRepoCandidates[sample(1: nrow(MemeRepoCandidates), min(input$meme_num_of_repost, nrow(MemeRepoCandidates)), replace = FALSE),]\n        MemeRepoCandidates <- MemeRepoCandidates[order(MemeRepoCandidates$post_reach, decreasing = TRUE),]\n        MemeRepoCandidates\n        \n      }\n      \n      else {\n        \n        MemeRepoCandidates <- MemeRepoCandidates[which(MemeRepoCandidates$times_repost == as.integer(input$meme_times_reposted)),]\n        MemeRepoCandidates <- MemeRepoCandidates[sample(1: nrow(MemeRepoCandidates), min(input$meme_num_of_repost, nrow(MemeRepoCandidates)), replace = FALSE),]\n        MemeRepoCandidates <- MemeRepoCandidates[order(MemeRepoCandidates$post_reach, decreasing = TRUE),]\n        MemeRepoCandidates\n        \n      }\n    }\n  })\n  \n  # 2. Category and Times Repo Summary*** ---------------------------------------------------------------------------------------------\n  \n  \n  # 3. Articles Repost Suggestions Table & Plots -----------------------------------------------------------------------------------------------  \n  output$articles_table_1 = DT::renderDataTable({\n    \n    ArticleDailySuggest <- article_repost_suggestions()\n    \n    if(length(ArticleDailySuggest)){\n      \n      # DailySuggest$CTR <- paste0(formatC(100 * DailySuggest$CTR, format = \"f\", digits = 2), \"%\")\n      # DailySuggest$interaction_rate <- paste0(formatC(100 * DailySuggest$interaction_rate, format = \"f\", digits = 2), \"%\")\n      # DailySuggest$average_ctr <- paste0(formatC(100 * DailySuggest$average_ctr, format = \"f\", digits = 2), \"%\")\n      # DailySuggest$average_interaction_rate <- paste0(formatC(100 * DailySuggest$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n      \n      ArticleDailySuggest <- ArticleDailySuggest[, input$article_show_vars_table_1]\n      \n      ArticleDailySuggest\n    }\n    \n    ArticleDailySuggest[, input$article_show_vars_table_1]\n    \n  }, escape = FALSE, rownames = FALSE, colnames = input$article_show_vars_table_1, selection = \"single\", class = \"compact\", filter = 'top', options = list(columnDefs = list(list(className = 'dt-center', targets = c(3:9)))))\n  \n  #REVISAR COLNAMES!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11\n  \n  output$article_title_selected_1 <- renderHighchart({\n    \n    DailySuggest <- article_repost_suggestions()\n    s = input$articles_table_1_rows_selected\n    \n    if(length(s)){\n      \n      post_id <- DailySuggest[s,]$status_id\n      \n      headline <- DataArticles[which(DataArticles$status_id == post_id),]$headline\n      sharetext <- DataArticles[which(DataArticles$status_id == post_id),]$sharetext\n      \n      hc <- highchart() %>% \n        hc_title(text = headline) %>%\n        hc_subtitle(text = sharetext) %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$articles_plot_selected_1 <- renderHighchart({\n    \n    DailySuggest <- article_repost_suggestions()\n    s = input$articles_table_1_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- DailySuggest[s,]$mitu_link\n      Post_url <- gsub(\".*<a href='\\\\s*|' target='_blank'>.*\", \"\", Post_url)\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      RepostsGroup$ctr <- as.numeric(format(RepostsGroup$ctr*100, digits= 2))\n      RepostsGroup$interaction_rate <- as.numeric(format(RepostsGroup$interaction_rate*100, digits = 2))\n      \n      ds_ctr <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$ctr, url = RepostsGroup[x,]$permalink)\n      })\n      \n      ds_ir <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$interaction_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      \n      hc <- highchart() %>% \n        hc_chart(type = \"column\") %>%\n        hc_title(text = \"CTR & IR\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>%  \n        hc_xAxis(type = \"category\") %>% \n        hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n        hc_add_series(data = ds_ctr, name = \"CTR\") %>% \n        hc_add_series(data = ds_ir, name = \"IR\") %>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = TRUE, floating = TRUE, align = \"right\", verticalAlign = \"top\") %>%\n        hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \"%\") %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$articles_plot_selected_2 <- renderHighchart({\n    \n    DailySuggest <- article_repost_suggestions()\n    s = input$articles_table_1_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- DailySuggest[s,]$mitu_link\n      Post_url <- gsub(\".*<a href='\\\\s*|' target='_blank'>.*\", \"\", Post_url)\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_reach, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Reach\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Reach\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n  })\n  \n  output$articles_plot_selected_3 <- renderHighchart({\n    \n    DailySuggest <- article_repost_suggestions()\n    s = input$articles_table_1_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- DailySuggest[s,]$mitu_link\n      Post_url <- gsub(\".*<a href='\\\\s*|' target='_blank'>.*\", \"\", Post_url)\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$link_clicks, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>% \n        hc_title(text = \"Link Clicks\") %>%\n        hc_chart(type = \"column\") %>% \n        hc_plotOptions(borderColor = \"black\", series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>% \n        hc_xAxis(type = \"category\") %>% \n        hc_add_series(data = dslc, name = \"Link Clicks\")%>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = FALSE)%>% \n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$article_picture_selected_1 <- renderText({\n    \n    DailySuggest <- article_repost_suggestions()\n    s = input$articles_table_1_rows_selected\n    \n    if(length(s)){\n      image_url <- DailySuggest[s,]$full_picture\n      # image_text <-img(src =\"shine-background-3.jpg\", height = 225, width = 300,align=\"center\")\n      image_text <- paste(\"<img src ='\", image_url,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n      image_text\n    }\n    \n  })\n  \n  output$articles_table_repost_selected_1 = DT::renderDataTable({\n    \n    DailySuggest <- article_repost_suggestions()\n    s = input$articles_table_1_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- DailySuggest[s,]$mitu_link\n      Post_url <- gsub(\".*<a href='\\\\s*|' target='_blank'>.*\", \"\", Post_url)\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      RepostsGroup$headline <- paste0(\"<a href='\",as.character(RepostsGroup$mitu_link),\"' target='_blank'>\",as.character(RepostsGroup$headline),\"</a>\")\n      RepostsGroup$sharetext <- paste0(\"<a href='\",as.character(RepostsGroup$permalink),\"' target='_blank'>\",as.character(RepostsGroup$sharetext),\"</a>\")\n      RepostsGroup$permalink <- paste0(\"<a href='\",RepostsGroup$permalink,\"' target='_blank'>\",RepostsGroup$permalink,\"</a>\")\n      RepostsGroup$mitu_link <- paste0(\"<a href='\",RepostsGroup$mitu_link,\"' target='_blank'>\",RepostsGroup$mitu_link,\"</a>\")\n      RepostsGroup$post_reach <- format(RepostsGroup$post_reach, big.mark = \",\")\n      RepostsGroup$link_clicks <- format(RepostsGroup$link_clicks, big.mark = \",\")\n      RepostsGroup$average_post_reach <- format(RepostsGroup$average_post_reach, big.mark = \",\")\n      RepostsGroup$average_link_clicks <- format(RepostsGroup$average_link_clicks, big.mark = \",\", digits = 2, nsmall = 2)\n      \n      RepostsGroup$ctr <- paste0(formatC(100 * RepostsGroup$ctr, format = \"f\", digits = 2), \"%\")\n      RepostsGroup$interaction_rate <- paste0(formatC(100 * RepostsGroup$interaction_rate, format = \"f\", digits = 2), \"%\")\n      RepostsGroup$average_ctr <- paste0(formatC(100 * RepostsGroup$average_ctr, format = \"f\", digits = 2), \"%\")\n      RepostsGroup$average_interaction_rate <- paste0(formatC(100 * RepostsGroup$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n      \n      RepostsGroup[, input$article_show_vars_table_1, drop = FALSE]\n    }\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(3:9)))))\n  \n  # 4. Articles Repost Candidates Table & Plots ------------------------------------------------------------------------------------------------  \n  output$articles_table_2 = DT::renderDataTable({\n    \n    ArticleRepoCandidates <- article_repost_candidates()\n    \n    ArticleRepoCandidates[, input$article_show_vars_table_2, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", filter = 'top', options = list(pageLength = 25, lengthMenu = c(25, 50, 75, 100), columnDefs = list(list(className = 'dt-center', targets = c(3:9)))))\n  \n  output$article_title_selected_2 <- renderHighchart({\n    \n    ArticleRepoCandidates <- article_repost_candidates()\n    \n    s = input$articles_table_2_rows_selected\n    \n    if(length(s)){\n      \n      post_id <- ArticleRepoCandidates[s,]$status_id\n      \n      headline <- DataArticles[which(DataArticles$status_id == post_id),]$headline\n      sharetext <- DataArticles[which(DataArticles$status_id == post_id),]$sharetext\n      \n      hc <- highchart() %>% \n        hc_title(text = headline) %>%\n        hc_subtitle(text = sharetext) %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$articles_plot_selected_4 <- renderHighchart({\n    \n    ArticleRepoCandidates <- article_repost_candidates()\n    s = input$articles_table_2_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- ArticleRepoCandidates[s,]$mitu_link\n      Post_url <- gsub(\".*<a href='\\\\s*|' target='_blank'>.*\", \"\", Post_url)\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      RepostsGroup$ctr <- as.numeric(format(RepostsGroup$ctr*100, digits= 2))\n      RepostsGroup$interaction_rate <- as.numeric(format(RepostsGroup$interaction_rate*100, digits = 2))\n      \n      ds_ctr <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$ctr, url = RepostsGroup[x,]$permalink)\n      })\n      \n      ds_ir <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$interaction_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      \n      hc <- highchart() %>% \n        hc_chart(type = \"column\") %>%\n        hc_title(text = \"CTR & IR\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>%  \n        hc_xAxis(type = \"category\") %>% \n        hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n        hc_add_series(data = ds_ctr, name = \"CTR\") %>% \n        hc_add_series(data = ds_ir, name = \"IR\") %>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = TRUE, floating = TRUE, align = \"right\", verticalAlign = \"top\") %>%\n        hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \"%\") %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$articles_plot_selected_5 <- renderHighchart({\n    \n    ArticleRepoCandidates <- article_repost_candidates()\n    s = input$articles_table_2_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- ArticleRepoCandidates[s,]$mitu_link\n      Post_url <- gsub(\".*<a href='\\\\s*|' target='_blank'>.*\", \"\", Post_url)\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_reach, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Reach\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Reach\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n  })\n  \n  output$articles_plot_selected_6 <- renderHighchart({\n    \n    ArticleRepoCandidates <- article_repost_candidates()\n    s = input$articles_table_2_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- ArticleRepoCandidates[s,]$mitu_link\n      Post_url <- gsub(\".*<a href='\\\\s*|' target='_blank'>.*\", \"\", Post_url)\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$link_clicks, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>% \n        hc_title(text = \"Link Clicks\") %>%\n        hc_chart(type = \"column\") %>% \n        hc_plotOptions(borderColor = \"black\", series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>% \n        hc_xAxis(type = \"category\") %>% \n        hc_add_series(data = dslc, name = \"Link Clicks\")%>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = FALSE)%>% \n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$article_picture_selected_2 <- renderText({\n    \n    ArticleRepoCandidates <- article_repost_candidates()\n    s = input$articles_table_2_rows_selected\n    \n    if(length(s)){\n      image_url <- ArticleRepoCandidates[s,]$full_picture\n      image_text <- paste(\"<img src ='\", image_url,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n      image_text\n    }\n    \n  })\n  \n  output$articles_table_repost_selected_2 = DT::renderDataTable({\n\n    ArticleRepoCandidates <- article_repost_candidates()\n    s = input$articles_table_2_rows_selectedd\n    \n    if(length(s)){\n      \n      Post_url <- ArticleRepoCandidates[s,]$mitu_link\n      Post_url <- gsub(\".*<a href='\\\\s*|' target='_blank'>.*\", \"\", Post_url)\n      RepostsGroup <- DataArticles[which(DataArticles$mitu_link == Post_url),]\n      \n      RepostsGroup$headline <- paste0(\"<a href='\",as.character(RepostsGroup$mitu_link),\"' target='_blank'>\",as.character(RepostsGroup$headline),\"</a>\")\n      RepostsGroup$sharetext <- paste0(\"<a href='\",as.character(RepostsGroup$permalink),\"' target='_blank'>\",as.character(RepostsGroup$sharetext),\"</a>\")\n      RepostsGroup$permalink <- paste0(\"<a href='\",RepostsGroup$permalink,\"' target='_blank'>\",RepostsGroup$permalink,\"</a>\")\n      RepostsGroup$mitu_link <- paste0(\"<a href='\",RepostsGroup$mitu_link,\"' target='_blank'>\",RepostsGroup$mitu_link,\"</a>\")\n      RepostsGroup$post_reach <- format(RepostsGroup$post_reach, big.mark = \",\")\n      RepostsGroup$link_clicks <- format(RepostsGroup$link_clicks, big.mark = \",\")\n      RepostsGroup$average_post_reach <- format(RepostsGroup$average_post_reach, big.mark = \",\")\n      RepostsGroup$average_link_clicks <- format(RepostsGroup$average_link_clicks, big.mark = \",\", digits = 2, nsmall = 2)\n      \n      RepostsGroup$ctr <- paste0(formatC(100 * RepostsGroup$ctr, format = \"f\", digits = 2), \"%\")\n      RepostsGroup$interaction_rate <- paste0(formatC(100 * RepostsGroup$interaction_rate, format = \"f\", digits = 2), \"%\")\n      RepostsGroup$average_ctr <- paste0(formatC(100 * RepostsGroup$average_ctr, format = \"f\", digits = 2), \"%\")\n      RepostsGroup$average_interaction_rate <- paste0(formatC(100 * RepostsGroup$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n      \n      RepostsGroup[, input$article_show_vars_table_2, drop = FALSE]\n    }\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(3:9)))))\n  \n  # 5. Articles Repost Groups Table ------------------------------------------------------------------------------------------------------------ \n  output$articles_table_3 = renderDataTable({\n    \n    ifelse(any(c(input$article_ctr_box, input$article_ir_box, input$article_clicks_box, input$article_reach_box)),\n           \n           ArticleRepoGroups <- DataArticles[which(input$article_ctr_box*(DataArticles$average_ctr >= input$article_ctr_bench/100) | input$article_ir_box*(DataArticles$average_interaction_rate >= input$article_ir_bench/100) | input$article_clicks_box*(DataArticles$average_link_clicks >= input$article_clicks_bench) | input$article_reach_box*(DataArticles$average_post_reach >= input$article_reach_bench)),],\n           \n           ArticleRepoGroups <- DataArticles[order(DataArticles$mitu_link, decreasing = T),]\n    )\n    \n    ArticleRepoGroups$headline <- paste0(\"<a href='\",as.character(ArticleRepoGroups$mitu_link),\"' target='_blank'>\",as.character(ArticleRepoGroups$headline),\"</a>\")\n    ArticleRepoGroups$sharetext <- paste0(\"<a href='\",as.character(ArticleRepoGroups$permalink),\"' target='_blank'>\",as.character(ArticleRepoGroups$sharetext),\"</a>\")\n    ArticleRepoGroups$permalink <- paste0(\"<a href='\",ArticleRepoGroups$permalink,\"' target='_blank'>\",ArticleRepoGroups$permalink,\"</a>\")\n    ArticleRepoGroups$mitu_link <- paste0(\"<a href='\",ArticleRepoGroups$mitu_link,\"' target='_blank'>\",ArticleRepoGroups$mitu_link,\"</a>\")\n    ArticleRepoGroups$post_reach <- format(ArticleRepoGroups$post_reach, big.mark = \",\")\n    ArticleRepoGroups$link_clicks <- format(ArticleRepoGroups$link_clicks, big.mark = \",\")\n    ArticleRepoGroups$average_post_reach <- format(ArticleRepoGroups$average_post_reach, big.mark = \",\")\n    ArticleRepoGroups$average_link_clicks <- format(ArticleRepoGroups$average_link_clicks, big.mark = \",\", digits = 2, nsmall = 2)\n    \n    ArticleRepoGroups$ctr <-paste0(formatC(100 * ArticleRepoGroups$ctr, format = \"f\", digits = 2), \"%\")\n    ArticleRepoGroups$interaction_rate <- paste0(formatC(100 * ArticleRepoGroups$interaction_rate, format = \"f\", digits = 2), \"%\")\n    ArticleRepoGroups$average_ctr <- paste0(formatC(100 * ArticleRepoGroups$average_ctr, format = \"f\", digits = 2), \"%\")\n    ArticleRepoGroups$average_interaction_rate <- paste0(formatC(100 * ArticleRepoGroups$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    ifelse(input$article_days_bet_repo_box == TRUE,\n           \n           ArticleRepoGroups <- ArticleRepoGroups[which(ArticleRepoGroups$days_bet_last_post_today >= input$article_days_bet_repo_bench[1] & ArticleRepoGroups$days_bet_last_post_today <= input$article_days_bet_repo_bench[2]), ],\n           \n           ArticleRepoGroups <- ArticleRepoGroups[order(ArticleRepoGroups$mitu_link, decreasing = T),]\n    )\n    \n    ArticleRepoGroups[, input$article_show_vars_table_3, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", filter = 'top', options = list(pageLength = 25, lengthMenu = c(25, 50, 75, 100), columnDefs = list(list(className = 'dt-center', targets = c(3:9)))))\n  \n  \n  \n  \n  \n  # 3. Videos Repost Suggestions Table & Plots -----------------------------------------------------------------------------------------------  \n  output$videos_table_1 = DT::renderDataTable({\n    \n    VideoDailySuggest <- video_repost_suggestions()\n    \n    if(length(VideoDailySuggest)){\n      \n      # DailySuggest$CTR <- paste0(formatC(100 * DailySuggest$CTR, format = \"f\", digits = 2), \"%\")\n      # DailySuggest$interaction_rate <- paste0(formatC(100 * DailySuggest$interaction_rate, format = \"f\", digits = 2), \"%\")\n      # DailySuggest$average_ctr <- paste0(formatC(100 * DailySuggest$average_ctr, format = \"f\", digits = 2), \"%\")\n      # DailySuggest$average_interaction_rate <- paste0(formatC(100 * DailySuggest$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n      \n      VideoDailySuggest[, input$video_show_vars_table_1, drop = FALSE]\n      \n    }\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", filter = 'top', options = list(columnDefs = list(list(className = 'dt-center', targets = c(2:8)))))\n  \n  output$video_title_selected_1 <- renderHighchart({\n    \n    DailySuggest <- video_repost_suggestions()\n    s = input$videos_table_1_rows_selected\n    \n    if(length(s)){\n      \n      post_id <- DailySuggest[s,]$status_id\n      \n      # headline <- DataArticles[which(DataArticles$status_id == post_id),]$headline\n      sharetext <- DataVideos[which(DataVideos$status_id == post_id),]$sharetext\n      \n      hc <- highchart() %>% \n        hc_title(text = sharetext) %>%\n        # hc_subtitle(text = sharetext) %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$videos_plot_selected_1 <- renderHighchart({\n    \n    DailySuggest <- video_repost_suggestions()\n    s = input$videos_table_1_rows_selected\n    \n    if(length(s)){\n      \n      video_repost_share <- DailySuggest[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == video_repost_share),]\n      \n      RepostsGroup$views_rate <- as.numeric(format(RepostsGroup$views_rate*100, digits= 2))\n      RepostsGroup$interaction_rate <- as.numeric(format(RepostsGroup$interaction_rate*100, digits = 2))\n      \n      ds_ctr <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$views_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      ds_ir <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$interaction_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      \n      hc <- highchart() %>% \n        hc_chart(type = \"column\") %>%\n        hc_title(text = \"VR & IR\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>%  \n        hc_xAxis(type = \"category\") %>% \n        hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n        hc_add_series(data = ds_ctr, name = \"Views Rate\") %>% \n        hc_add_series(data = ds_ir, name = \"IR\") %>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = TRUE, floating = TRUE, align = \"right\", verticalAlign = \"top\") %>%\n        hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \"%\") %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$videos_plot_selected_2 <- renderHighchart({\n    \n    DailySuggest <- video_repost_suggestions()\n    s = input$videos_table_1_rows_selected\n    \n    if(length(s)){\n      \n      video_repost_share <- DailySuggest[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == video_repost_share),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_reach, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Reach\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Reach\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n  })\n  \n  output$videos_plot_selected_3 <- renderHighchart({\n    \n    DailySuggest <- video_repost_suggestions()\n    s = input$videos_table_1_rows_selected\n    \n    if(length(s)){\n      \n      video_repost_share <- DailySuggest[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == video_repost_share),]\n      \n      dsvv <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_video_views, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>% \n        hc_title(text = \"Video Views\") %>%\n        hc_chart(type = \"column\") %>% \n        hc_plotOptions(borderColor = \"black\", series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>% \n        hc_xAxis(type = \"category\") %>% \n        hc_add_series(data = dsvv, name = \"Video Views\")%>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = FALSE)%>% \n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$video_picture_selected_1 <- renderText({\n    \n    DailySuggest <- video_repost_suggestions()\n    s = input$videos_table_1_rows_selected\n    \n    if(length(s)){\n      image_url <- DailySuggest[s,]$full_picture\n      image_text <- paste(\"<img src ='\", image_url,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n      image_text\n    }\n    \n  })\n  \n  \n  # 4. Videos Repost Candidates Table & Plots ------------------------------------------------------------------------------------------------  \n  output$videos_table_2 = DT::renderDataTable({\n    \n    VideoRepoCandidates <- video_repost_candidates()\n    \n    VideoRepoCandidates[, input$video_show_vars_table_2, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", filter = 'top', options = list(pageLength = 25, lengthMenu = c(25, 50, 75, 100), columnDefs = list(list(className = 'dt-center', targets = c(2:8)))))\n \n  output$video_title_selected_2 <- renderHighchart({\n    \n    VideoRepoCandidates <- video_repost_candidates()\n    \n    s = input$videos_table_2_rows_selected\n    \n    if(length(s)){\n      \n      post_id <- VideoRepoCandidates[s,]$status_id\n      \n      headline <- DataArticles[which(DataArticles$status_id == post_id),]$headlineC\n      sharetext <- DataVideos[which(DataVideos$status_id == post_id),]$sharetext\n      \n      hc <- highchart() %>% \n        hc_title(text = sharetext) %>%\n        # hc_subtitle(text = sharetext) %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$videos_plot_selected_4 <- renderHighchart({\n    \n    VideoRepoCandidates <- video_repost_candidates()\n    s = input$videos_table_2_rows_selected\n    \n    if(length(s)){\n      \n      Post_url <- VideoRepoCandidates[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == Post_url),]\n      \n      RepostsGroup$views_rate <- as.numeric(format(RepostsGroup$views_rate*100, digits= 2))\n      RepostsGroup$interaction_rate <- as.numeric(format(RepostsGroup$interaction_rate*100, digits = 2))\n      \n      ds_ctr <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$views_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      ds_ir <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$interaction_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      \n      hc <- highchart() %>% \n        hc_chart(type = \"column\") %>%\n        hc_title(text = \"VR & IR\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>%  \n        hc_xAxis(type = \"category\") %>% \n        hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n        hc_add_series(data = ds_ctr, name = \"Views Rate\") %>% \n        hc_add_series(data = ds_ir, name = \"IR\") %>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = TRUE, floating = TRUE, align = \"right\", verticalAlign = \"top\") %>%\n        hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \"%\") %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$videos_plot_selected_5 <- renderHighchart({\n    \n    VideoRepoCandidates <- video_repost_candidates()\n    s = input$videos_table_2_rows_selected\n    \n    if(length(s)){\n      \n      video_repost_share <- VideoRepoCandidates[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == video_repost_share),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_reach, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Reach\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Reach\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n  })\n  \n  output$videos_plot_selected_6 <- renderHighchart({\n    \n    VideoRepoCandidates <- video_repost_candidates()\n    s = input$videos_table_2_rows_selected\n    \n    if(length(s)){\n      \n      video_repost_share <- VideoRepoCandidates[s,]$video_repost_sharetext\n      RepostsGroup <- DataVideos[which(DataVideos$video_repost_sharetext == video_repost_share),]\n      \n      dsvv <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_video_views, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>% \n        hc_title(text = \"Video Views\") %>%\n        hc_chart(type = \"column\") %>% \n        hc_plotOptions(borderColor = \"black\", series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>% \n        hc_xAxis(type = \"category\") %>% \n        hc_add_series(data = dsvv, name = \"Video Views\")%>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = FALSE)%>% \n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$video_picture_selected_2 <- renderText({\n    \n    DailySuggest <- video_repost_candidates()\n    s = input$videos_table_2_rows_selected\n    \n    if(length(s)){\n      image_url <- DailySuggest[s,]$full_picture\n      image_text <- paste(\"<img src ='\", image_url,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n      image_text\n    }\n    \n  })\n  \n  \n  # 5. Videos Repost Groups Table ------------------------------------------------------------------------------------------------------------ \n  output$videos_table_3 = renderDataTable({\n    \n    ifelse(any(c(input$video_views_rate_box, input$video_ir_box, input$video_reach_box, input$video_viral_fan_rate_box, input$video_views_box)),\n           \n           VideoRepoGroups <- DataVideos[which(input$video_views_rate_box*(DataVideos$average_views_rate >= input$video_views_rate_bench/100) | input$video_ir_box*(DataVideos$average_interaction_rate >= input$video_ir_bench/100) | input$video_views_box*(DataVideos$average_video_views >= input$video_views_bench) | input$video_reach_box*(DataVideos$average_post_reach >= input$video_reach_bench) | input$video_viral_fan_rate_box*(DataVideos$average_viral_fan_rate >= input$video_viral_fan_rate_bench)),],\n           \n           VideoRepoGroups <- DataVideos\n    )\n    \n    VideoRepoGroups$sharetext <- paste0(\"<a href='\",as.character(VideoRepoGroups$permalink),\"' target='_blank'>\",as.character(VideoRepoGroups$sharetext),\"</a>\")\n    VideoRepoGroups$permalink <- paste0(\"<a href='\",VideoRepoGroups$permalink,\"' target='_blank'>\",VideoRepoGroups$permalink,\"</a>\")\n    VideoRepoGroups$post_reach <- format(VideoRepoGroups$post_reach, big.mark = \",\")\n    VideoRepoGroups$post_video_views <- format(VideoRepoGroups$post_video_views, big.mark = \",\")\n    VideoRepoGroups$average_post_reach <- format(VideoRepoGroups$average_post_reach, big.mark = \",\")\n    VideoRepoGroups$average_video_views <- format(VideoRepoGroups$average_video_views, big.mark = \",\", digits = 2, nsmall = 2)\n    \n    VideoRepoGroups$views_rate <-paste0(formatC(100 * VideoRepoGroups$views_rate, format = \"f\", digits = 2), \"%\")\n    VideoRepoGroups$interaction_rate <- paste0(formatC(100 * VideoRepoGroups$interaction_rate, format = \"f\", digits = 2), \"%\")\n    VideoRepoGroups$average_views_rate <- paste0(formatC(100 * VideoRepoGroups$average_views_rate, format = \"f\", digits = 2), \"%\")\n    VideoRepoGroups$average_interaction_rate <- paste0(formatC(100 * VideoRepoGroups$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    VideoRepoGroups$viral_fan_rate <- paste0(formatC(100 * VideoRepoGroups$viral_fan_rate, format = \"f\", digits = 2))\n    VideoRepoGroups$average_viral_fan_rate <- paste0(formatC(100 * VideoRepoGroups$average_viral_fan_rate, format = \"f\", digits = 2))\n    \n    ifelse(input$video_days_bet_repo_box == TRUE,\n           \n           VideoRepoGroups <- VideoRepoGroups[which(VideoRepoGroups$days_bet_last_post_today >= input$video_days_bet_repo_bench[1] & VideoRepoGroups$days_bet_last_post_today <= input$video_days_bet_repo_bench[2]), ],\n           \n           VideoRepoGroups <- VideoRepoGroups\n    )\n    \n    VideoRepoGroups[, input$video_show_vars_table_3, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", filter = 'top', options = list(pageLength = 25, lengthMenu = c(25, 50, 75, 100), columnDefs = list(list(className = 'dt-center', targets = c(2:8)))))\n  \n  \n  \n  \n  \n  # 3. Videos Repost Suggestions Table & Plots -----------------------------------------------------------------------------------------------  \n  output$memes_table_1 = DT::renderDataTable({\n    \n    MemeDailySuggest <- meme_repost_suggestions()\n    \n    if(length(MemeDailySuggest)){\n      \n      # DailySuggest$CTR <- paste0(formatC(100 * DailySuggest$CTR, format = \"f\", digits = 2), \"%\")\n      # DailySuggest$interaction_rate <- paste0(formatC(100 * DailySuggest$interaction_rate, format = \"f\", digits = 2), \"%\")\n      # DailySuggest$average_ctr <- paste0(formatC(100 * DailySuggest$average_ctr, format = \"f\", digits = 2), \"%\")\n      # DailySuggest$average_interaction_rate <- paste0(formatC(100 * DailySuggest$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n      \n      MemeDailySuggest[, input$meme_show_vars_table_1, drop = FALSE]\n      \n    }\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", filter = 'top', options = list(columnDefs = list(list(className = 'dt-center', targets = c(2:9)))))\n  \n  output$meme_title_selected_1 <- renderHighchart({\n    \n    DailySuggest <- meme_repost_suggestions()\n    s = input$memes_table_1_rows_selected\n    \n    if(length(s)){\n      \n      post_id <- DailySuggest[s,]$status_id\n      \n      imagetext <- DataPhotos[which(DataPhotos$status_id == post_id),]$image_text_py\n      sharetext <- DataPhotos[which(DataPhotos$status_id == post_id),]$sharetext\n      \n      hc <- highchart() %>% \n        hc_title(text = sharetext) %>%\n        hc_subtitle(text = imagetext) %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$memes_plot_selected_1 <- renderHighchart({\n    \n    DailySuggest <- meme_repost_suggestions()\n    s = input$memes_table_1_rows_selected\n    \n    if(length(s)){\n      \n      meme_image_text <- DailySuggest[s,]$image_text_py\n      RepostsGroup <- DataPhotos[which(DataPhotos$image_text_py == meme_image_text),]\n      \n      # RepostsGroup$views_rate <- as.numeric(format(RepostsGroup$views_rate*100, digits= 2))\n      RepostsGroup$interaction_rate <- as.numeric(format(RepostsGroup$interaction_rate*100, digits = 2))\n      \n      # ds_ctr <- lapply(1:nrow(RepostsGroup), function(x){\n      #   \n      #   list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$views_rate, url = RepostsGroup[x,]$permalink)\n      # })\n      \n      ds_ir <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$interaction_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      \n      hc <- highchart() %>% \n        hc_chart(type = \"column\") %>%\n        hc_title(text = \"VR & IR\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>%  \n        hc_xAxis(type = \"category\") %>% \n        hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n        # hc_add_series(data = ds_ctr, name = \"Views Rate\") %>% \n        hc_add_series(data = ds_ir, name = \"IR\") %>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = TRUE, floating = TRUE, align = \"right\", verticalAlign = \"top\") %>%\n        hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \"%\") %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$memes_plot_selected_2 <- renderHighchart({\n    \n    DailySuggest <- meme_repost_suggestions()\n    s = input$memes_table_1_rows_selected\n    \n    if(length(s)){\n      \n      meme_image_text <- DailySuggest[s,]$image_text_py\n      RepostsGroup <- DataPhotos[which(DataPhotos$image_text_py == meme_image_text),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_reach, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Reach\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Reach\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n  })\n  \n  output$memes_plot_selected_3 <- renderHighchart({\n    \n    DailySuggest <- meme_repost_suggestions()\n    s = input$memes_table_1_rows_selected\n    \n    if(length(s)){\n      \n      meme_image_text <- DailySuggest[s,]$image_text_py\n      RepostsGroup <- DataPhotos[which(DataPhotos$image_text_py == meme_image_text),]\n      \n      dssr <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$share_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>% \n        hc_title(text = \"Share Rate\") %>%\n        hc_chart(type = \"column\") %>% \n        hc_plotOptions(borderColor = \"black\", series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>% \n        hc_xAxis(type = \"category\") %>% \n        hc_add_series(data = dssr, name = \"Share Rate\")%>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = FALSE)%>% \n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$meme_picture_selected_1 <- renderText({\n    \n    DailySuggest <- meme_repost_suggestions()\n    s = input$memes_table_1_rows_selected\n    \n    if(length(s)){\n      image_url <- DailySuggest[s,]$full_picture\n      image_text <- paste(\"<img src ='\", image_url,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n      image_text\n    }\n    \n  })\n  \n  \n  # 4. Memes Repost Candidates Table & Plots ------------------------------------------------------------------------------------------------  \n  output$memes_table_2 = DT::renderDataTable({\n    \n    MemeRepoCandidates <-meme_repost_candidates()\n    \n    MemeRepoCandidates[, input$meme_show_vars_table_2, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", filter = 'top', options = list(pageLength = 25, lengthMenu = c(25, 50, 75, 100), columnDefs = list(list(className = 'dt-center', targets = c(2:9)))))\n  \n  output$meme_title_selected_2 <- renderHighchart({\n    \n    DailySuggest <- meme_repost_candidates()\n    s = input$memes_table_2_rows_selected\n    \n    if(length(s)){\n      \n      post_id <- DailySuggest[s,]$status_id\n      \n      imagetext <- DataPhotos[which(DataPhotos$status_id == post_id),]$image_text_py\n      sharetext <- DataPhotos[which(DataPhotos$status_id == post_id),]$sharetext\n      \n      hc <- highchart() %>% \n        hc_title(text = sharetext) %>%\n        hc_subtitle(text = imagetext) %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$memes_plot_selected_4 <- renderHighchart({\n    \n    DailySuggest <- meme_repost_candidates()\n    s = input$memes_table_2_rows_selected\n    \n    if(length(s)){\n      \n      meme_image_text <- DailySuggest[s,]$image_text_py\n      RepostsGroup <- DataPhotos[which(DataPhotos$image_text_py == meme_image_text),]\n      \n      # RepostsGroup$views_rate <- as.numeric(format(RepostsGroup$views_rate*100, digits= 2))\n      RepostsGroup$interaction_rate <- as.numeric(format(RepostsGroup$interaction_rate*100, digits = 2))\n      \n      # ds_ctr <- lapply(1:nrow(RepostsGroup), function(x){\n      #   \n      #   list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$views_rate, url = RepostsGroup[x,]$permalink)\n      # })\n      \n      ds_ir <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$interaction_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      \n      hc <- highchart() %>% \n        hc_chart(type = \"column\") %>%\n        hc_title(text = \"VR & IR\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(dataLabels = list(enabled = FALSE),stacking = \"normal\",enableMouseTracking = TRUE, borderColor = \"black\")) %>%  \n        hc_xAxis(type = \"category\") %>% \n        hc_yAxis(title = \"\",labels = list(format = \"{value} %\")) %>% \n        # hc_add_series(data = ds_ctr, name = \"Views Rate\") %>% \n        hc_add_series(data = ds_ir, name = \"IR\") %>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = TRUE, floating = TRUE, align = \"right\", verticalAlign = \"top\") %>%\n        hc_tooltip(pointFormat = \"{series.name}: <b>{point.y}</b><br/>\", valueSuffix = \"%\") %>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$memes_plot_selected_5 <- renderHighchart({\n    \n    DailySuggest <- meme_repost_candidates()\n    s = input$memes_table_2_rows_selected\n    \n    if(length(s)){\n      \n      meme_image_text <- DailySuggest[s,]$image_text_py\n      RepostsGroup <- DataPhotos[which(DataPhotos$image_text_py == meme_image_text),]\n      \n      dslc <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$post_reach, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>%\n        hc_title(text = \"Reach\") %>%\n        hc_chart(type = \"column\") %>%\n        hc_plotOptions(series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_add_series(data = dslc, name = \"Reach\")%>%\n        hc_exporting(enabled = FALSE)%>%\n        hc_legend(enabled = FALSE)%>%\n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n  })\n  \n  output$memes_plot_selected_6 <- renderHighchart({\n    \n    DailySuggest <- meme_repost_candidates()\n    s = input$memes_table_2_rows_selected\n    \n    if(length(s)){\n      \n      meme_image_text <- DailySuggest[s,]$image_text_py\n      RepostsGroup <- DataPhotos[which(DataPhotos$image_text_py == meme_image_text),]\n      \n      dssr <- lapply(1:nrow(RepostsGroup), function(x){\n        \n        list(name = as.Date(RepostsGroup[x,]$date), y = RepostsGroup[x,]$share_rate, url = RepostsGroup[x,]$permalink)\n      })\n      \n      hc <- highchart() %>% \n        hc_title(text = \"Share Rate\") %>%\n        hc_chart(type = \"column\") %>% \n        hc_plotOptions(borderColor = \"black\", series = list (cursor = \"pointer\", point = list(events = list(click = JS(\"function () { window.open(this.options.url); }\")))), column = list(borderColor = \"black\")) %>% \n        hc_xAxis(type = \"category\") %>% \n        hc_add_series(data = dssr, name = \"Share Rate\")%>%\n        hc_exporting(enabled = FALSE)%>% \n        hc_legend(enabled = FALSE)%>% \n        hc_add_theme(hc_theme_smpl())\n      \n      hc\n      \n    }\n    \n  })\n  \n  output$meme_picture_selected_2 <- renderText({\n    \n    DailySuggest <- meme_repost_candidates()\n    s = input$memes_table_2_rows_selected\n    \n    if(length(s)){\n      image_url <- DailySuggest[s,]$full_picture\n      image_text <- paste(\"<img src ='\", image_url,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n      image_text\n    }\n    \n  })\n  \n  \n  # 5. Memes Repost Groups Table ------------------------------------------------------------------------------------------------------------ \n  output$memes_table_3 = renderDataTable({\n    \n    ifelse(any(c(input$meme_share_rate_box, input$meme_ir_box, input$meme_reach_box, input$meme_viral_fan_rate_box)),\n           \n           MemeRepoGroups <- DataPhotos[which(input$meme_share_rate_box*(DataPhotos$average_share_rate >= input$meme_share_rate_bench/100) | input$meme_ir_box*(DataPhotos$average_interaction_rate >= input$meme_ir_bench/100) | input$meme_reach_box*(DataPhotos$average_post_reach >= input$meme_reach_bench) | input$meme_viral_fan_rate_box*(DataPhotos$average_viral_fan_rate >= input$meme_viral_fan_rate_bench)),],\n           \n           MemeRepoGroups <- DataPhotos\n    )\n    \n    MemeRepoGroups$sharetext <- paste0(\"<a href='\",as.character(MemeRepoGroups$permalink),\"' target='_blank'>\",as.character(MemeRepoGroups$sharetext),\"</a>\")\n    MemeRepoGroups$permalink <- paste0(\"<a href='\",MemeRepoGroups$permalink,\"' target='_blank'>\",MemeRepoGroups$permalink,\"</a>\")\n    MemeRepoGroups$post_reach <- format(MemeRepoGroups$post_reach, big.mark = \",\")\n    MemeRepoGroups$average_post_reach <- format(MemeRepoGroups$average_post_reach, big.mark = \",\")\n    \n    MemeRepoGroups$share_rate <-paste0(formatC(100 * MemeRepoGroups$share_rate, format = \"f\", digits = 2), \"%\")\n    MemeRepoGroups$interaction_rate <- paste0(formatC(100 * MemeRepoGroups$interaction_rate, format = \"f\", digits = 2), \"%\")\n    MemeRepoGroups$average_share_rate <- paste0(formatC(100 * MemeRepoGroups$average_share_rate, format = \"f\", digits = 2), \"%\")\n    MemeRepoGroups$average_interaction_rate <- paste0(formatC(100 * MemeRepoGroups$average_interaction_rate, format = \"f\", digits = 2), \"%\")\n    \n    MemeRepoGroups$viral_fan_rate <- paste0(formatC(100 * MemeRepoGroups$viral_fan_rate, format = \"f\", digits = 2))\n    MemeRepoGroups$average_viral_fan_rate <- paste0(formatC(100 * MemeRepoGroups$average_viral_fan_rate, format = \"f\", digits = 2))\n    \n    ifelse(input$meme_days_bet_repo_box == TRUE,\n           \n           MemeRepoGroups <- MemeRepoGroups[which(MemeRepoGroups$days_bet_last_post_today >= input$meme_days_bet_repo_bench[1] & MemeRepoGroups$days_bet_last_post_today <= input$meme_days_bet_repo_bench[2]), ],\n           \n           MemeRepoGroups <- MemeRepoGroups\n    )\n    \n    MemeRepoGroups[, input$meme_show_vars_table_3, drop = FALSE]\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", filter = 'top', options = list(pageLength = 25, lengthMenu = c(25, 50, 75, 100), columnDefs = list(list(className = 'dt-center', targets = c(2:9)))))\n  \n  \n  \n  # 7. Reposts Stats*** ---------------------------------------------------------------------------------------------------------------  \n  \n  \n  \n}\n\n\n# SHINY APP =========================================================================================================================\n\nshinyApp(ui = ui, server = server)",
    "created" : 1497470937547.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3071928978",
    "id" : "379F2FAE",
    "lastKnownWriteTime" : 1495826099,
    "last_content_update" : 1495826099,
    "path" : "~/Repost_App_2.0/app.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}